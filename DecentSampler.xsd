<?xml version="1.0" encoding="UTF-8"?>
<!--
XML Schema Definition for DecentSampler preset files.

Based on David Hilowitz's Decent Sampler documentation:
https://www.decentsamples.com/wp-content/uploads/2020/06/format-documentation.html


MIT License

Copyright (c) 2022 Praash

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

-->

<!--
================================================================
    Main structure
================================================================
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" version="1.6.12">
    <xs:element name="DecentSampler">
        <xs:complexType>
            <xs:choice maxOccurs="unbounded">
                <xs:element name="ui" type="ui" />
                <xs:element name="groups" type="groups" minOccurs="1"></xs:element>
                <xs:element name="tags" type="tags"/>
                <xs:element name="effects" type="effects" />
                <xs:element name="midi" type="midi" />
                <xs:element name="modulators" type="modulators"></xs:element>
            </xs:choice>

            <xs:attribute name="minVersion" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
(optional): This is the minimum version on which this preset is known to run.
If a user is running an old version of DS, and a developer has specified a minVersion for their instrument, a dialog box will show up telling users that their version is outdated and that they should upgrade in order to get the full effect.
They can than choose to ignore this warning or hit download.
The dialog box does not show up for iOS users as most of them have auto-updates turned on.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>

        </xs:complexType>
    </xs:element>

<!--
================================================================
    Type definitions
================================================================
-->

    <xs:complexType name="ui">
        <xs:annotation>
            <xs:documentation>
The `ui` element is how you specify a user interface for your instrument.
Each dspreset should have at most one `ui` element.
            </xs:documentation>
        </xs:annotation>

        <xs:choice maxOccurs="unbounded">
            <xs:element name="tab" type="tab" />
            <xs:element name="keyboard" type="keyboard" minOccurs="0" maxOccurs="1"/>
        </xs:choice>

        <xs:attribute name="bgColor" type="hexARGB">
            <xs:annotation>
                <xs:documentation>
An eight digit hex value indicating the background color to be used for the background of the UI.
This color will be drawn underneath any background image specified by `bgImage`.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="bgImage" type="relativeFilePath">
            <xs:annotation>
                <xs:documentation>
A relative path to a background image to use.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="coverArt" type="relativeFilePath">
            <xs:annotation>
                <xs:documentation>
A relative path to a cover art image to use.
After the first time this library is opened, this will get displayed on the “My Libraries” tab.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="width" type="xs:integer" use="required">
            <xs:annotation>
                <xs:documentation>
The width of your user interface.
Recommended value: `812`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="height" type="xs:integer" use="required">
            <xs:annotation>
                <xs:documentation>
The height of your user interface.
Recommended value: `375`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <!-- Seen in the boilerplate example -->
        <xs:attribute name="layoutMode" /> <!-- layoutMode="relative" -->
        <xs:attribute name="bgMode" /> <!-- bgMode="top_left" -->
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="tab">
        <xs:annotation>
            <xs:documentation>
We may, at some point, add support for multiple tabs.
At present it is only possible to have a single tab within DecentSampler instruments.
As such, every UI must have at most one `tab` element.
            </xs:documentation>
        </xs:annotation>

        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="button" type="button" minOccurs="0" maxOccurs="unbounded" />
            <xs:element name="control" type="control" minOccurs="0" maxOccurs="unbounded" />
            <xs:element name="image" type="image" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="menu" type="menu" minOccurs="0" maxOccurs="unbounded" />
            <xs:element name="labeled-knob" type="labeled-knob" minOccurs="0" maxOccurs="unbounded" />
            <xs:element name="label" type="label" minOccurs="0" maxOccurs="unbounded" />
        </xs:choice>

        <xs:attribute name="name">
            <xs:annotation>
                <xs:documentation>
An optional name to be associated with this tab.
This is currently not displayed anywhere.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="keyboard">
        <xs:annotation><xs:documentation>
This is where you specify settings relating to the on-screen keyboard.
There should be only one `keyboard` element in your preset file.
At this point, the only settings are color ranges which are specified using `color` sub-elements.
        </xs:documentation></xs:annotation>

        <xs:sequence maxOccurs="unbounded">
            <xs:element name="color">
                <xs:annotation><xs:documentation>
You can use `color` elements to change the color of portions of the on-screen keyboard.
You can have as many `color` elements as you like.
Only white keys are affected.
It's worth noting that colors specified in the `color` elements are overlayed on top of the white keys using a 75% transparency, so choose your colors accordingly.
This is done to preserve the readability of the key labels.
                </xs:documentation></xs:annotation>
                <xs:complexType>
                    <xs:attribute name="loNote" type="midi7Bit" use="required">
                        <xs:annotation><xs:documentation>
The bottom of the range for which this color should be displayed.
                        </xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="hiNote" type="midi7Bit" use="required">
                        <xs:annotation><xs:documentation>
The top of the range for which this color should be displayed.
                        </xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="color" type="hexARGB">
                        <xs:annotation><xs:documentation>
A hex representation of the ARGB color to be used for this key range.
                        </xs:documentation></xs:annotation>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="modulators">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="lfo" type="modulatorLFO" />
            <xs:element name="envelope" type="modulatorEnvelope" />
        </xs:choice>
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="modulatorLFO">

        <xs:sequence maxOccurs="unbounded">
            <xs:element name="binding" type="binding" />
        </xs:sequence>

        <xs:attribute name="shape" use="required">
            <xs:annotation><xs:documentation>
Controls the oscillator shape.
Possible values are `sine`, `square`, `saw`.
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="sine" />
                    <xs:enumeration value="square" />
                    <xs:enumeration value="saw" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>

        <xs:attribute name="frequency" type="decimalPositive" use="required">
            <xs:annotation><xs:documentation>
The speed of the LFO in cycles per second.
For example, a value of `10` would mean that the waveform repeats ten times per second.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="modAmount" type="decimalMultiplier" default="1.0">
            <xs:annotation><xs:documentation>
This value between `0` and `1` controls how much the modulation affects the things it is targeting.
In conventional terms, this is like the modulation depth.
Default value: `1.0`.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="scope" default="global">
            <xs:annotation><xs:documentation>
Whether or not this LFO exists for all notes or whether each keypress gets its own LFO.
Possible values are `global` (default for LFOs) and `voice`.
If `voice` is chosen, a new LFO is started each time a new note is pressed.
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="global" />
                    <xs:enumeration value="voice" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="modulatorEnvelope">

        <xs:sequence maxOccurs="unbounded">
            <xs:element name="binding" type="binding" />
        </xs:sequence>

        <xs:attributeGroup ref="adsrEnvelope" />

        <xs:attribute name="modAmount" type="decimalMultiplier" default="1.0">
            <xs:annotation><xs:documentation>
This value between `0` and `1` controls how much the modulation affects the things it is targeting.
In conventional terms, this is like the modulation depth.
Default value: `1.0`.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="scope" default="voice">
            <xs:annotation><xs:documentation>
Whether or not this envelope exists for all notes or whether each keypress gets its own envelope.
Possible values are `global` and `voice` (default for envelopes).
If `voice` is chosen, a new envelope is started each time a new note is pressed.
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="global" />
                    <xs:enumeration value="voice" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>

    </xs:complexType>

<!--=================================-->

    <xs:complexType name="labeled-knob">
        <xs:annotation>
            <xs:documentation>
A user control widget containing a built-in label.
For precise UI creation, it may be advisable to use a combination of `control` and `label` elements rather than `labeled-knob`.
            </xs:documentation>
        </xs:annotation>

        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="binding" type="binding" />
        </xs:sequence>

        <xs:attributeGroup ref="controlProperties" />
        <xs:attributeGroup ref="textProperties" />
        <xs:attributeGroup ref="widgetGeometry" />
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="button">
        <xs:annotation><xs:documentation>
The `&lt;button&gt;` element allows you to create a button within your UI.
There are two styles of buttons: `text` buttons and `image` buttons.
        </xs:documentation></xs:annotation>

        <xs:sequence minOccurs="1" maxOccurs="unbounded">
            <xs:element name="state" type="buttonState" />
        </xs:sequence>

        <xs:attribute name="style" default="text">
            <xs:annotation><xs:documentation>
The type of button we want.
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="text" />
                    <xs:enumeration value="image" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>

        <xs:attribute name="value" type="xs:nonNegativeInteger" default="0">
            <xs:annotation><xs:documentation>
The is the 0-based index of the button state that is currently selected.
A value of 0 means that the first state is active.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attributeGroup ref="buttonImageAttributes" />
        <xs:attributeGroup ref="widgetGeometry" />
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="buttonState">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="binding" type="binding" />
        </xs:sequence>

        <xs:attribute name="name">
            <xs:annotation><xs:documentation>
The text to display on a text button when this state is active.
            </xs:documentation></xs:annotation>
        </xs:attribute>
        <xs:attributeGroup ref="buttonImageAttributes" />
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="control">
        <xs:annotation>
            <xs:documentation>
A user control widget without a built-in label.
            </xs:documentation>
        </xs:annotation>

        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="binding" type="binding" />
        </xs:sequence>


        <xs:attributeGroup ref="controlProperties" />
        <xs:attributeGroup ref="textProperties" />
        <xs:attributeGroup ref="widgetGeometry" />
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="menu">
        <xs:annotation>
            <xs:documentation>
A drop-down menu within your UI.
In order for your drop-down menu to have options, it must contain `option` elements.
            </xs:documentation>
        </xs:annotation>

        <xs:sequence maxOccurs="unbounded">
            <xs:element name="option" type="option"></xs:element>
        </xs:sequence>

        <xs:attribute name="value" type="xs:integer">
            <xs:annotation>
                <xs:documentation>
The is the 1-based index of the menu option that is currently selected.
NOTE: Index numbers for menu items start at `1`.
A value of `0` means that no item is selected.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attributeGroup ref="widgetGeometry" />
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="option">
        <xs:annotation>
            <xs:documentation>
*That's right*.
The `option` element has only one attribute.
In order to have your `option` elements actually do something useful, you need to attach bindings to them.
            </xs:documentation>
        </xs:annotation>

        <xs:sequence>
            <xs:element name="binding" type="binding" minOccurs="0" />
        </xs:sequence>

        <xs:attribute name="name">
            <xs:annotation>
                <xs:documentation>
The name of this option.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="binding">
        <xs:annotation><xs:documentation>
Adding a binding to a UI control tells the DecentSampler engine that it should take input from a source and use it to change values in another part of the engine.
An example of this would be a knob which controls the volume of a group or a CC controller that changes an effect parameter.
        </xs:documentation></xs:annotation>

        <xs:attribute name="type" use="required">
            <xs:annotation><xs:documentation>
This tells the engine what type of parameter this is.
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="amp" />
                    <xs:enumeration value="effect" />
                    <xs:enumeration value="control" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>

        <xs:attribute name="level" use="required">
            <xs:annotation><xs:documentation>
The level (or "scope") at which the binding affects a parameter.

`instrument`: the whole instrument
`group`: a single group, at the index of the `position` attribute
`ui`: an UI control or label, at the index of the `position` attribute
`tag`: all sample regions with the given tag.
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="ui" />
                    <xs:enumeration value="instrument" />
                    <xs:enumeration value="group" />
                    <xs:enumeration value="tag" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>

        <xs:attribute name="position" type="xs:nonNegativeInteger">
            <xs:annotation><xs:documentation>
The specific 0-based index of the element to be modified by this binding.
If you are targeting a group, for example, the first group would be 0, the second group would be 1, etc.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="controlIndex" type="xs:nonNegativeInteger">
            <xs:annotation><xs:documentation>
When a binding is targeting a control, this is the same thing as the `position` attribute.
It is a specific 0-based index of the control to be modified by this binding.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="groupIndex" type="xs:nonNegativeInteger">
            <xs:annotation><xs:documentation>
When a binding is targeting a group, this is the same thing as the `position` attribute.
It is a specific 0-based index of the group to be modified by this binding.
If you are targeting an group-level effect, this would specified the group under which the effect lives.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="effectIndex" type="xs:nonNegativeInteger">
            <xs:annotation><xs:documentation>
When a binding is targeting an effect, this is the same thing as the `position` attribute.
It is a specific 0-based index of the effect to be modified by this binding.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="modulatorIndex" type="xs:nonNegativeInteger">
            <xs:annotation><xs:documentation>
When a binding is targeting a modulator, this is the same thing as the `position` attribute.
It is a specific 0-based index of the modulator be modified by this binding.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="identifier" type="xs:string">
            <xs:annotation><xs:documentation>
A string identifying the specific parameter that you wish to change.
If you are modulating based on tags, you would put the tag you are targeting here.

&lt;a href=&quot;https://www.decentsamples.com/wp-content/uploads/2020/06/format-documentation.html#appendix-d-how-to-control-parameters-using-tags-example-mic-level-knobs&quot;&gt;
See DecentSampler documentation, Appendix D for an example.
&lt;/a&gt;
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="parameter" type="bindingParameterName" use="required" />

        <xs:attribute name="tags">
            <xs:annotation><xs:documentation>
A comma-separated list of tags to be modified by this binding.
This allows you to set values for multiple groups at once by targeting a tag that is assigned to the groups.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="translation" default="linear">
            <xs:simpleType><xs:restriction base="xs:string">
                <xs:enumeration value="linear" />
                <xs:enumeration value="table" />
                <xs:enumeration value="fixed_value" />
            </xs:restriction></xs:simpleType>
        </xs:attribute>

        <xs:attribute name="translationTable" type="translationTableType" default="0,0;1.1,1"/>
        <xs:attribute name="translationOutputMin" type="xs:decimal" />
        <xs:attribute name="translationOutputMax" type="xs:decimal" />
        <xs:attribute name="translationReversed" type="xs:boolean">
            <xs:annotation><xs:documentation>
Valid values are `true` and `false`. This is only looked at if translation is set to linear.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="translationValue">
            <xs:annotation><xs:documentation>
The parameter value to use when using `translation="fixed_value"`.
            </xs:documentation></xs:annotation>
        </xs:attribute>
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="label">
        <xs:annotation>
            <xs:documentation>
Specifies a positioned text label.
            </xs:documentation>
        </xs:annotation>

        <xs:attribute name="text" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>
The actual text that should be displayed as part of the label.
A label's text can also be set dynamically using bindings using the `TEXT` binding parameter name.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="vAlign" type="alignVertical">
            <xs:annotation>
                <xs:documentation>
The vertical alignment of the text within the box described by the width and height attributes.
Valid values: `top`, `bottom`, `center`.
Default: `center`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="hAlign" type="alignHorizontal">
            <xs:annotation>
                <xs:documentation>
The horizontal alignment of the text within the box described by the width and height attributes.
Valid values: `left`, `right`, `center`.
Default: `center`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attributeGroup ref="textProperties" />
        <xs:attributeGroup ref="widgetGeometry" />
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="image">
        <xs:annotation><xs:documentation>
Allows you to place a static image into your user interface.
It lives underneath the `tab` element.
        </xs:documentation></xs:annotation>

        <xs:attribute name="path" type="relativeFilePath" use="required">
            <xs:annotation><xs:documentation>
The relative path of the image file to show in this component.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="aspectRatioMode" default="preserve">
            <xs:annotation><xs:documentation>
Whether or not the engine should preserve the aspect ratio of the image.
Note: regardless of these settings, you still need to specify a width and height for your image element.
Valid values: `preserve`, `stretch`.
Default value is `preserve`.
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="preserve" />
                    <xs:enumeration value="stretch" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attributeGroup ref="widgetGeometry" />
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="groups">
        <xs:annotation>
            <xs:documentation>
Every dspreset file should have one and only one `groups` element.
This is where you specify the samples that make up your sample library.
This element lives right underneath the top-level `DecentSampler` element.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="group">
                <xs:annotation>
                    <xs:documentation>
Samples live in groups.
There can be many group elements under the `groups` element.
It can be useful to sort your samples into groups in order to apply similar settings to them or to control them with a knob.
The order of groups in a file matters insofar as bindings will often reference groups by using an index.
The first group in a file is group `0`, the second is group `1`, etc.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:choice minOccurs="0" maxOccurs="unbounded">
                        <xs:element name="sample" type="sample" maxOccurs="unbounded" />
                        <xs:element name="effects" type="groupEffects" maxOccurs="1"/>
                    </xs:choice>

                    <xs:attribute name="groupTuning" type="xs:decimal">
                        <xs:annotation>
                            <xs:documentation>
Group-level pitch adjustment for changing note pitch.
In semitones.
For example, `1.0` would be a half-step up and `-1` would a half-step down.
Default: `0`
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attributeGroup ref="regionSettings" />
                </xs:complexType>
            </xs:element>
        </xs:sequence>

        <xs:attribute name="globalTuning" type="xs:decimal" default="0" />

        <xs:attributeGroup ref="regionSettings" />
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="tags">
        <xs:annotation>
            <xs:documentation>
The `tags` element lives right below your top-level `DecentSampler` element.
It allows you to specify details about the tags you use throughout your instrument.
It is however not actually necessary to include a `tags` element for every tag you use.
You only need to create this if you want to specify additional details about your tags.
            </xs:documentation>
        </xs:annotation>

        <xs:sequence maxOccurs="unbounded">
            <xs:element name="tag">
                <xs:annotation>
                    <xs:documentation>
Underneath the `tags` element, you can have any number of `tag` elements.
These specify details for each individual tag that you use throughout your sample mapping.
                    </xs:documentation>
                </xs:annotation>

                <xs:complexType>
                    <xs:attribute name="name">
                        <xs:annotation><xs:documentation>
The tag name.
                        </xs:documentation></xs:annotation>
                    </xs:attribute>

                    <xs:attribute name="enabled" type="xs:boolean"/>

                    <xs:attribute name="volume" type="decimalMultiplier">
                        <xs:annotation>
                            <xs:documentation>
A number for `0.0` to `1.0` that specifies the initial volume for a tag.
Default: `1.0`
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>

                    <xs:attribute name="polyphony" type="xs:nonNegativeInteger">
                        <xs:annotation>
                            <xs:documentation>
A whole number that specifies the number of voices allowed for this tag.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="effects">
        <xs:annotation>
            <xs:documentation>
Within the `effects` element, you can have any number of `effect` sub-elements.
            </xs:documentation>
        </xs:annotation>

        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="effect" type="globalEffect" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="groupEffects">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="effect" type="groupEffect" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="globalEffect">
        <xs:annotation>
            <xs:documentation>

Specify parameters for each individual effect that you would like to have in your global effects chain.
There are currently only a handful effects available although more could definitely be added on request.

&lt;h2&gt; Effect types: &lt;/h2&gt;

&lt;h3&gt; `chorus` &lt;/h3&gt;
Attributes: `mix`, `modDepth`, `modRate`

&lt;h3&gt; `convolution` &lt;/h3&gt;
Attributes: `irFile`, `mix`

&lt;h3&gt; `delay` &lt;/h3&gt;
Attributes: `delayTime`, `feedback`, `stereoOffset`, `wetLevel`

&lt;h3&gt; Filters: `lowpass`, `lowpass_4pl`, `bandpass`, `hipass` &lt;/h3&gt;
Attributes: `frequency`, `resonance`

&lt;h3&gt; `phaser` &lt;/h3&gt;
Attributes: `centerFrequency`, `feedback`, `mix`, `modDepth`, `modRate`

&lt;h3&gt; `reverb` &lt;/h3&gt;
Attributes: `damping`, `roomSize`, `wetLevel`


            </xs:documentation>
        </xs:annotation>

        <xs:attribute name="type" type="effectType" use="required" />

        <xs:attributeGroup ref="effectChorusAttributes" />
        <xs:attributeGroup ref="effectDelayAttributes" />
        <xs:attributeGroup ref="effectFilterAttributes" />
        <xs:attributeGroup ref="effectGainAttributes" />
        <xs:attributeGroup ref="effectPhaserAttributes" />
        <xs:attributeGroup ref="effectReverbAttributes" />
        <xs:attributeGroup ref="effectConvolutionReverbAttributes" />

    </xs:complexType>

<!--=================================-->

    <xs:complexType name="groupEffect">

        <xs:attribute name="type" type="groupEffectType" use="required" />

        <xs:attributeGroup ref="effectChorusAttributes" />
        <xs:attributeGroup ref="effectFilterAttributes" />
        <xs:attributeGroup ref="effectGainAttributes" />

    </xs:complexType>

<!--=================================-->

    <xs:simpleType name="effectType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="bandpass" />
            <xs:enumeration value="chorus" />
            <xs:enumeration value="convolution" />
            <xs:enumeration value="delay" />
            <xs:enumeration value="gain" />
            <xs:enumeration value="hipass" />
            <xs:enumeration value="lowpass" />
            <xs:enumeration value="lowpass_4pl" />
            <xs:enumeration value="reverb" />
            <xs:enumeration value="phaser" />
        </xs:restriction>
    </xs:simpleType>

<!--=================================-->

    <xs:simpleType name="groupEffectType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="bandpass" />
            <xs:enumeration value="chorus" />
            <xs:enumeration value="hipass" />
            <xs:enumeration value="lowpass" />
            <xs:enumeration value="lowpass_4pl" />
        </xs:restriction>
    </xs:simpleType>

<!--=================================-->

    <xs:complexType name="midi">
        <xs:annotation><xs:documentation>
MIDI mappings.
        </xs:documentation></xs:annotation>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="cc" type="midiCCElement" />
            <xs:element name="note" type="midiNoteElement" />
        </xs:choice>
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="midiCCElement">
        <xs:annotation><xs:documentation>
Within the `midi` element, you can have any number of `cc` elements.
These allow you to map changes in incoming continuous controller messages to specific parameters of your instrument.
To use this functionality, you'll want to add a separate `cc` element for each CC number you would like to respond to.
The `cc` element has a single required attribute `number` which specifies the number (from 0 to 127) of the continuous controller you would like to listen on.
Beneath the `cc` element, you can have any number of bindings.
        </xs:documentation></xs:annotation>

        <xs:sequence>
            <xs:element name="binding" type="binding" maxOccurs="unbounded" />
        </xs:sequence>

        <xs:attribute name="number" type="midi7Bit" use="required" />
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="midiNoteElement">
        <xs:annotation><xs:documentation>
Within the `midi` element, you can have any number of `note` elements.
These allow you to map specific notes to specific parameters of your instrument.
To use this functionality, you'll want to add a separate `note` element for each MIDI note you would like to respond to.
The `note` element has a single required attribute `note=""` which specifies the number (from 0 to 127) of the MIDI note you would like to listen on.
Beneath the `note` element, you can have any number of bindings.
        </xs:documentation></xs:annotation>
        <xs:attribute name="note" type="midi7Bit" use="required" />
    </xs:complexType>

<!--=================================-->

    <xs:complexType name="sample">
        <xs:attribute name="path" type="relativeFilePath" use="required">
            <xs:annotation>
                <xs:documentation>
The relative path of the sample file to play for this zone.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="start" type="xs:nonNegativeInteger" default="0">
            <xs:annotation>
                <xs:documentation>
The frame/sample position of the start of the sample audio.
This is useful if the sample starts midway through the audio file.
Default: `0`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="end" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>
The frame/sample position of the end of the sample audio.
This is useful if the sample starts midway through the audio file.
Default: the file's length in samples minus 1.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="tuning" type="xs:decimal">
            <xs:annotation>
                <xs:documentation>
A fine-tuning number (in semitones) for changing the note pitch.
Example: `1.0` would be a half-step up.
Default: `0`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attributeGroup ref="regionSettings" />
    </xs:complexType>

<!--=================================-->

    <xs:simpleType name="midi7Bit">
        <xs:restriction base="xs:integer">
            <xs:minInclusive value="0" />
            <xs:maxInclusive value="127" />
        </xs:restriction>
    </xs:simpleType>

<!--=================================-->

    <xs:simpleType name="curveShape">
        <xs:annotation>
            <xs:documentation>
A value from -100 to 100 that determines the shape of a curve.
`-100` is a logarithmic curve, `0` is a linear curve, and `100` is an exponential curve.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:decimal">
            <xs:minInclusive value="-100" />
            <xs:maxInclusive value="100" />
        </xs:restriction>
    </xs:simpleType>

<!--=================================-->

    <xs:simpleType name="hexARGB">
        <xs:annotation>
            <xs:documentation>
Colors are represented throughout the dspreset files using an 8-digit ARGB color format.
These are identical to web color hex codes except with an additional 2-digit hex number in front of them.
The first two digits are a hexadecimal representation of alpha level with 00 being fully transparent, 80 being 50% transparent, and FF being fully opaque.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:hexBinary">
            <xs:length value="4" fixed="true" />
        </xs:restriction>
    </xs:simpleType>

<!--=================================-->

    <xs:simpleType name="decimalMultiplier">
        <xs:restriction base="xs:decimal">
            <xs:minInclusive value="0.0" />
            <xs:maxInclusive value="1.0" />
        </xs:restriction>
    </xs:simpleType>

<!--=================================-->

    <xs:simpleType name="decimalPositive">
        <xs:restriction base="xs:decimal">
            <xs:minInclusive value="0.0" />
        </xs:restriction>
    </xs:simpleType>

<!--=================================-->

    <xs:simpleType name="relativeFilePath">
        <xs:annotation>
            <xs:documentation>
Relative path to a file.
Do not use absolute paths - they break across OS platforms and users.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="[a-zA-Z0-9_][a-zA-Z0-9 #\-_./\\]*"></xs:pattern>
        </xs:restriction>
    </xs:simpleType>

<!--=================================-->

    <xs:simpleType name="decibelGain">
        <xs:restriction base="xs:string">
            <xs:pattern value="-?\d+(\.\d*)?dB"></xs:pattern>
        </xs:restriction>
    </xs:simpleType>

<!--=================================-->

    <xs:simpleType name="decibelOrAbsoluteGain">
        <xs:annotation>
            <xs:documentation>
A gain value can be either an absolute factor `0.0-1.0`,
or a decibel value ending in `dB`.
Example: `3dB`
            </xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="decibelGain xs:decimal" />
    </xs:simpleType>

<!--=================================-->

    <xs:simpleType name="panPercentage">
        <xs:annotation>
            <xs:documentation>
Stereo panning as a number from `-100` to `100`.
`-100` is panned all the way to the left, 100 is panned all the way to the right.
Default: `0`
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:decimal">
            <xs:minInclusive value="-100.0" />
            <xs:maxInclusive value="100.0" />
        </xs:restriction>
    </xs:simpleType>

<!--=================================-->

    <xs:simpleType name="alignVertical">
        <xs:restriction base="xs:string">
            <xs:enumeration value="top" />
            <xs:enumeration value="center" />
            <xs:enumeration value="bottom" />
        </xs:restriction>
    </xs:simpleType>

<!--=================================-->

    <xs:simpleType name="alignHorizontal">
        <xs:restriction base="xs:string">
            <xs:enumeration value="left" />
            <xs:enumeration value="center" />
            <xs:enumeration value="right" />
        </xs:restriction>
    </xs:simpleType>

<!--=================================-->

    <xs:simpleType name="controlStyle">
        <xs:restriction base="xs:string">
            <xs:enumeration value="custom_skin_horizontal_drag" />
            <xs:enumeration value="custom_skin_vertical_drag" />
            <xs:enumeration value="linear_bar" />
            <xs:enumeration value="linear_bar_vertical" />
            <xs:enumeration value="linear_horizontal" />
            <xs:enumeration value="linear_vertical" />
            <xs:enumeration value="rotary" />
            <xs:enumeration value="rotary_horizontal_drag" />
            <xs:enumeration value="rotary_horizontal_vertical_drag" />
            <xs:enumeration value="rotary_vertical_drag" />
        </xs:restriction>
    </xs:simpleType>

<!--=================================-->

    <xs:simpleType name="translationTableType">
        <xs:restriction base="xs:string">
            <xs:pattern value="(-?[0-9.]+,-?[0-9.]+)(;-?[0-9.]+,-?[0-9.]+)*" />
        </xs:restriction>
    </xs:simpleType>

<!--=================================-->

    <xs:simpleType name="humanReadableNoteName">
        <xs:restriction base="xs:string">
            <xs:pattern value="[A-G]#?[0-9]" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="noteNameOrNumber">
        <xs:union memberTypes="midi7Bit humanReadableNoteName" />
    </xs:simpleType>

<!--=================================-->

    <xs:simpleType name="midiNoteList">
        <xs:restriction base="xs:string">
            <xs:pattern value="(,?\d{1,3})+" />
        </xs:restriction>
    </xs:simpleType>

<!--=================================-->

    <xs:simpleType name="bindingParameterName">
        <xs:restriction base="xs:string">

            <!-- instrument, amp -->
            <xs:enumeration value="AMP_VOLUME" />
            <xs:enumeration value="GLOBAL_TUNING" />
            <xs:enumeration value="PAN" />
            <xs:enumeration value="AMP_VEL_TRACK" />
            <xs:enumeration value="ENV_ATTACK" />
            <xs:enumeration value="ENV_DECAY" />
            <xs:enumeration value="ENV_SUSTAIN" />
            <xs:enumeration value="ENV_RELEASE" />
            <xs:enumeration value="GLIDE_TIME" />

            <!-- instrument, effect -->
            <xs:enumeration value="FX_FILTER_FREQUENCY" />
            <xs:enumeration value="FX_FILTER_RESONANCE" />
            <xs:enumeration value="FX_REVERB_WET_LEVEL" />
            <xs:enumeration value="FX_REVERB_ROOM_SIZE" />
            <xs:enumeration value="FX_REVERB_DAMPING" />
            <xs:enumeration value="FX_IR_FILE" />
            <xs:enumeration value="FX_MIX" />
            <xs:enumeration value="FX_MOD_DEPTH" />
            <xs:enumeration value="FX_MOD_RATE" />
            <xs:enumeration value="FX_CENTER_FREQUENCY" />
            <xs:enumeration value="FX_FEEDBACK" />
            <xs:enumeration value="FX_DELAY_TIME" />
            <xs:enumeration value="FX_STEREO_OFFSET" />
            <xs:enumeration value="FX_WET_LEVEL" />

            <!-- group, amp -->
            <xs:enumeration value="ENABLED" />
            <xs:enumeration value="AMP_VOLUME" />
            <xs:enumeration value="GROUP_TUNING" />

            <!-- tag, amp -->
            <xs:enumeration value="TAG_ENABLED" />
            <xs:enumeration value="TAG_VOLUME" />

            <!-- ui, control -->
            <xs:enumeration value="VALUE" />
            <xs:enumeration value="TEXT" />

        </xs:restriction>
    </xs:simpleType>

<!--
================================================================
    Attribute group definitions
================================================================
-->

<!-- Common attributes for <sample>, <group> and <groups> -->
    <xs:attributeGroup name="regionSettings">
        <xs:attribute name="tags" />
        <xs:attribute name="volume" type="decibelOrAbsoluteGain" />
        <xs:attribute name="pan" type="panPercentage" />

        <xs:attribute name="glideTime" type="decimalPositive">
            <xs:annotation><xs:documentation>
The glide/portamento time in seconds.
A value of `0.0` would mean no portamento.
You will most likely want to set this globally at the `groups` level.
Default: `0.0`
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="glideMode" default="legato">
            <xs:annotation><xs:documentation>
Controls the glide/portamento behavior.
Possible values are:

`always` (glide is always performed),
`legato` (glide is performed only when transitioning from one note to another), and
`off`.

Default: `legato`
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="always" />
                    <xs:enumeration value="legato" />
                    <xs:enumeration value="off" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>

        <xs:attribute name="loNote" type="noteNameOrNumber" default="0">
            <xs:annotation>
                <xs:documentation>
The MIDI note number of the lowest note for which the zone should be triggered.
Default: `0`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="hiNote" type="noteNameOrNumber" default="127">
            <xs:annotation>
                <xs:documentation>
The MIDI note number of the highest note for which the zone should be triggered.
Default: `127`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="rootNote" type="noteNameOrNumber">
            <xs:annotation>
                <xs:documentation>
The MIDI note number of the root note of the sample.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="loVel" type="midi7Bit">
            <xs:annotation>
                <xs:documentation>
The lowest velocity for which this zone should be triggered.
Default: `0`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="hiVel" type="midi7Bit">
            <xs:annotation>
                <xs:documentation>
The highest velocity for which this zone should be triggered.
Default: `127`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="ampVelTrack" type="xs:decimal">
            <xs:annotation>
                <xs:documentation>
The degree to which the velocity of the incoming notes affects the volume of the samples in this group.
`0` = not at all.
`1` = volume is completely determined by incoming velocity.

When the value is `1`, a velocity of `127` (max velocity) yields a gain `1.0` (full volume),
a velocity of `63` (half velocity) yields a gain of `0.5` (half volume), etc.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="pitchKeyTrack" type="decimalMultiplier">
            <xs:annotation>
                <xs:documentation>
 A number from `0.0` to `1.0`.
 `0` means that the pitch will stay the same regardless of what note is played.
 `1` means that the pitch will increase by one semitone when the note increases by one semitone (i.e. normal key pitch tracking).
 Default: `1`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="trigger" default="attack">
            <xs:annotation><xs:documentation>
`attack` means a sample is played when the note on message is received.
`release` means the sample is played when the note off message is received (aka a release trigger).
`first` means that the sample will only be played if no other notes are playing.
`legato` means that the sample will only be played if some other notes are already playing.

This can also be set at the `&lt;group&gt;` level. Default: `attack`.
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="attack" />
                    <xs:enumeration value="release" />
                    <xs:enumeration value="first" />
                    <xs:enumeration value="legato" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>

        <xs:attributeGroup ref="adsrEnvelope" />
        <xs:attributeGroup ref="adsrCurveSettings" />
        <xs:attributeGroup ref="loHiCCGroup" />
        <xs:attributeGroup ref="onLoHiCCTrigger" />
        <xs:attributeGroup ref="roundRobinGroup" />
        <xs:attributeGroup ref="loopingGroup" />
    </xs:attributeGroup>

<!--=================================-->

    <xs:attributeGroup name="adsrEnvelope">
        <xs:attribute name="attack" type="decimalPositive">
            <xs:annotation><xs:documentation>
The length in seconds of the attack portion of the ADSR envelope.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="decay" type="decimalPositive">
            <xs:annotation><xs:documentation>
The length in seconds of the decay portion of the ADSR envelope.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="sustain" type="decimalMultiplier">
            <xs:annotation>
                <xs:documentation>
The height of the sustain portion of the ADSR envelope.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="release" type="xs:decimal">
            <xs:annotation>
                <xs:documentation>
The length in seconds of the release portion of the ADSR envelope.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>

<!--=================================-->

    <xs:attributeGroup name="adsrCurveSettings">
        <xs:attribute name="attackCurve" type="curveShape" default="-100" />
        <xs:attribute name="decayCurve" type="curveShape" default="100" />
        <xs:attribute name="releaseCurve" type="curveShape" default="100" />
    </xs:attributeGroup>

<!--=================================-->

    <xs:attributeGroup name="roundRobinGroup">

        <xs:attribute name="seqMode" default="always">
            <xs:annotation><xs:documentation>
A value indicating the desired round robin behavior for this sample or group of samples.
Valid values are `random`, `true_random`, `round_robin`, and `always`.
            </xs:documentation></xs:annotation>

            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="random">
                        <xs:annotation><xs:documentation>
This causes random samples to be chosen from within the group of samples.
If there are more than two round robins, then the algorithm makes sure not to hit the same one twice in a row.
                        </xs:documentation></xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="true_random">
                        <xs:annotation><xs:documentation>
This causes random samples to be chosen from within the group of samples.
                        </xs:documentation></xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="round_robin">
                        <xs:annotation><xs:documentation>
This causes samples to be triggered sequentially according to their seqPosition values.
                        </xs:documentation></xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="always">
                        <xs:annotation><xs:documentation>
This just turns round robins off.
                        </xs:documentation></xs:annotation>
                    </xs:enumeration>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>

        <xs:attribute name="seqLength" type="xs:nonNegativeInteger" default="0">
            <xs:annotation><xs:documentation>
The length of the round robin queue.
If this is left out, then the engine will try to auto-detect the length of the roudn robin sequence.
Default: 0
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="seqPosition" type="xs:positiveInteger" default="1">
            <xs:annotation><xs:documentation>
A number indicating this zone's position in the round robin queue. This can also be set at the `group` level.
Default: `1`
            </xs:documentation></xs:annotation>

        </xs:attribute>
    </xs:attributeGroup>

<!--=================================-->

    <xs:attributeGroup name="loopingGroup">
        <xs:attribute name="loopStart" type="xs:nonNegativeInteger" default="0">
            <xs:annotation><xs:documentation>
The frame/sample position of the start of the sample's loop.
If this is not specified, but the sample is a wave file with embedded loop markers, those will be used instead.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="loopEnd" type="xs:nonNegativeInteger">
            <xs:annotation><xs:documentation>
The frame/sample position of the end of the sample's loop.
If this is not specified, but the sample is a wave file with embedded loop markers, those will be used instead.
Default: the file's length in samples minus 1.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="loopCrossfade" type="xs:nonNegativeInteger">
            <xs:annotation><xs:documentation>
When loop crossfades are used, instead of simply looping at a specific end point, a portion of the audio from before the loop point is faded in just as the audio from the end of the loop is faded out.
In this way, smooth audio loops can be achieved on samples that weren’t specifically prepared as looping.
This parameter is used for specifying the length of the crossade region in frames/samples.
This can also be set at the `&lt;group&gt;` level.
Default: 0 (crossfades off).
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="loopCrossfadeMode">
            <xs:annotation><xs:documentation>
This parameter is used to specify the curve used for crossfading when loop crossfades are turned on.
This can also be set at the `&lt;group&gt;` level.
Value values: `linear`, `equal_power`.
Default: `equal_power`.
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="equal_power" />
                    <xs:enumeration value="linear" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>

        <xs:attribute name="loopEnabled" type="xs:boolean">
            <xs:annotation><xs:documentation>
A boolean value indicating whether or not the loop should be used.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="silencedByTags">
            <xs:annotation><xs:documentation>
A command-separated list of tags.
Example: `tags="rt,mic1"`.

If a sample containing one of these tags gets triggered, then this sample will be stopped.
This is useful when setting up drums as it will allow you mute one hi-hat when another hi-hat plays.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="silencingMode" default="fast">
            <xs:annotation><xs:documentation>
Controls how quickly voices get silenced.
`fast` = immediately; `normal` = triggers the sample's release phase.
This second option, when used in conjunction with the release attribute, allows you to specify a longer release time.

Values: `fast`, `normal`. Default: `fast`
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="normal" />
                    <xs:enumeration value="fast" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>

        <xs:attribute name="previousNote" type="noteNameOrNumber">
            <xs:annotation><xs:documentation>
Only play this sample if the previously triggered note equals this note.
Format: Either a MIDI note number `1-127`, or a note name like `A4` or `G#3`.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="previousNotes" type="midiNoteList">
            <xs:annotation><xs:documentation>
Only play this sample if the previously triggered note equals one of these notes.
Format: a comma-separated list of MIDI note numbers (from 1 to 127) of the note.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="legatoInterval" type="xs:integer">
            <xs:annotation><xs:documentation>
This is similar to the `previousNote` attribute.
This causes the engine to only play the sample if the previously triggered note is exactly this semitone distance from the previous note.

For example, if the note for which this sample is being triggered is a C3 and the `legatoInterval` is set to `-2`, then the sample will only play if the previous note was a D3 because D3 minus 2 semitones equals C3.
Format: This can be a positive or negative whole number.
            </xs:documentation></xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>

<!--=================================-->

<!-- Common attributes for UI widgets -->
    <xs:attributeGroup name="widgetGeometry">
        <xs:attribute name="x" type="xs:integer" use="required">
            <xs:annotation>
                <xs:documentation>
The x position, in pixels, where (0,0) is the top-left corner.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="y" type="xs:integer" use="required">
            <xs:annotation>
                <xs:documentation>
The y position, in pixels, where (0,0) is the top-left corner.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <!--
            The documentation specifies width and height as "required", but some presets
            by Hilowitz leave one/both of these undefined for labeled-knobs and controls.
        -->
        <xs:attribute name="width" type="xs:integer">
            <xs:annotation>
                <xs:documentation>
The width of the whole widget, in pixels
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="height" type="xs:integer">
            <xs:annotation>
                <xs:documentation>
The height of the whole widget, in pixels
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>

<!--=================================-->

<!-- Common attributes for UI text -->
    <xs:attributeGroup name="textProperties">
        <xs:attribute name="textColor" type="hexARGB" />
        <xs:attribute name="textSize" type="xs:integer" default="12">
            <xs:annotation>
                <xs:documentation>
A font size for the text label.
Default: `12`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>

<!--=================================-->

<!-- Common attributes for UI controls -->
    <xs:attributeGroup name="controlProperties">
        <xs:attribute name="minValue" type="xs:decimal" default="0">
            <xs:annotation>
                <xs:documentation>
The minimum value of your control.
Default: `0`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="maxValue" type="xs:decimal" default="1">
            <xs:annotation>
                <xs:documentation>
The maximum value of your control.
Default: `1`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="value" type="xs:decimal" default="0">
            <xs:annotation>
                <xs:documentation>
The initial value of your control.
Default: `0`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="label" type="xs:string">
            <xs:annotation>
                <xs:documentation>
If `showLabel` is `true`, the actual text that should be displayed above the control
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="showLabel" type="xs:boolean" default="true">
            <xs:annotation>
                <xs:documentation>
A true/false value dictating whether or not a built-in label should be displayed.
Default: `true` for `labeled-knob` and `false` for `control` elements.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="parameterName" type="xs:string">
            <xs:annotation>
                <xs:documentation>
In a situation where the sampler does not have enough room to display the full UI, a shrunken down version of the UI will be used.
In such situations, this control will be labeled using the `parameterName`.
It is good practice to always include a `parameterName`.
If no `parameterName` is specified and `label` is specified, then that will be used instead.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>


        <xs:attribute name="style" type="controlStyle" default="rotary_vertical_drag" />

        <xs:attribute name="type" type="xs:string" />

        <xs:attribute name="trackForegroundColor" type="hexARGB" />
        <xs:attribute name="trackBackgroundColor" type="hexARGB" />

        <xs:attribute name="customSkinImage" type="relativeFilePath">
            <xs:annotation><xs:documentation>
This is path to an image to use for the control.
This is expected to be a JPEG or PNG in KnobMan format.
A huge gallery of compatible knobs can be found here (https://www.g200kg.com/en/webknobman/gallery.php).
&lt;hr /&gt;
If you are using custom knobs, it’s important that you specify a `style=` value of either `custom_skin_vertical_drag` or `custom_skin_horizontal_drag`.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="customSkinNumFrames" type="xs:nonNegativeInteger">
            <xs:annotation><xs:documentation>
The number of animation frames contained in the KnobMan image pointed to by `customSkinImage`.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="customSkinImageOrientation" default="vertical">
            <xs:annotation><xs:documentation>
The orientation of the frames within the KnobMan image pointed to by customSkinImage.
Valid values: `horizontal`, `vertical`.
Default: `vertical`.
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="horizontal" />
                    <xs:enumeration value="vertical" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>

        <xs:attribute name="mouseDragSensitivity" type="xs:integer">
            <xs:annotation><xs:documentation>
An integer number describing how sensitive the control should be to mouse drags.
The higher the number, the less sensitive the control will be to mouse movements.
            </xs:documentation></xs:annotation>
        </xs:attribute>
        <xs:attribute name="uid">
            <xs:annotation>
                <xs:documentation>
This is an internally generated value.
This can be ignored.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>

<!--=================================-->

    <xs:attributeGroup name="buttonImageAttributes">

        <xs:attribute name="mainImage" type="relativeFilePath">
            <xs:annotation><xs:documentation>
For `image` buttons only.
The path of the main image to display for this button.

This can set at the state level so that it only applies to a specific state.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="hoverImage" type="relativeFilePath">
            <xs:annotation><xs:documentation>
For `image` buttons only.
The path of the image to display when the user hovers their mouse over this button.

This can be set at the state level so that it only applies to a specific state.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="clickImage" type="relativeFilePath">
            <xs:annotation><xs:documentation>
For `image` buttons only.
The path of the image to display when the user clicks down on this button.

This can be set at the state level so that it only applies to a specific state.
            </xs:documentation></xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>

<!--=================================-->

    <xs:attributeGroup name="effectFilterAttributes">
        <xs:attribute name="resonance" type="decimalMultiplier" default="0.7" />

        <xs:attribute name="frequency" type="decimalPositive">
            <xs:annotation><xs:documentation>
Filter cutoff frequency in Hz.
            </xs:documentation></xs:annotation>
        </xs:attribute>

    </xs:attributeGroup>

<!--=================================-->

    <xs:attributeGroup name="effectConvolutionReverbAttributes">
        <xs:attribute name="irFile" type="relativeFilePath" />
    </xs:attributeGroup>

<!--=================================-->

    <xs:attributeGroup name="effectReverbAttributes">

        <xs:attribute name="roomSize" type="decimalMultiplier" default="0.7" />
        <xs:attribute name="damping" type="decimalMultiplier" default="0.3"/>
        <xs:attribute name="wetLevel" type="decimalMultiplier" default="0.5"/>

    </xs:attributeGroup>

<!--=================================-->

    <xs:attributeGroup name="effectChorusAttributes">

        <xs:attributeGroup ref="effectModAttributes" />

    </xs:attributeGroup>

<!--=================================-->

    <xs:attributeGroup name="effectPhaserAttributes">
        <xs:attribute name="feedback" default="0.7">
            <xs:simpleType>
                <xs:restriction base="xs:decimal">
                    <xs:minInclusive value="-1.0" />
                    <xs:maxInclusive value="1.0" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>

        <xs:attribute name="centerFrequency" type="xs:decimal" default="400">
            <xs:annotation><xs:documentation>
The center frequency (in Hz) of the phaser all-pass filters modulation.
Default: `400`
            </xs:documentation></xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>

<!--=================================-->

    <xs:attributeGroup name="effectDelayAttributes">

        <xs:attribute name="delayTime" default="0.7">
            <xs:annotation><xs:documentation>
The delay time in seconds.
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:decimal">
                    <xs:minInclusive value="0" />
                    <xs:maxInclusive value="10" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>

        <xs:attribute name="stereoOffset" default="0">
            <xs:annotation><xs:documentation>
The parameter allows you to introduce delay variations between the left and right channels.
Half of this amount is subtracted from the left channel's delay time and half of this amount is added to the right channel's delay time.
For example, if the delayTime is `0.5` seconds and the stereoOffset is `0.02` s, then the actual left channel delay time will be `0.49` s and the actual right channel delay time will be `0.51` s so that the two channels are offset by `0.02` seconds.
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:decimal">
                    <xs:minInclusive value="-10" />
                    <xs:maxInclusive value="10" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>

    </xs:attributeGroup>

<!--=================================-->

    <xs:attributeGroup name="effectGainAttributes">
        <xs:attribute name="level" default="0.7">
            <xs:simpleType>
                <xs:restriction base="xs:decimal">
                    <xs:minInclusive value="0.0" />
                    <xs:maxInclusive value="8.0" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>

<!--=================================-->

    <xs:attributeGroup name="effectModAttributes">
        <xs:attribute name="mix" type="decimalMultiplier" default="0.5" />

        <xs:attribute name="modDepth" type="decimalMultiplier" default="0.2">
            <xs:annotation><xs:documentation>
The modulation depth of the effect.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="modRate">
            <xs:annotation><xs:documentation>
The modulation speed in Hz.
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:decimal">
                    <xs:minInclusive value="0.0" />
                    <xs:maxInclusive value="10.0" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>

    </xs:attributeGroup>

<!--=================================-->

<!-- A total mess will follow! -->
    <xs:attributeGroup name="onLoHiCCTrigger" >
        <xs:attribute name="onLoCC1" type="midi7Bit" />
        <xs:attribute name="onLoCC2" type="midi7Bit" />
        <xs:attribute name="onLoCC3" type="midi7Bit" />
        <xs:attribute name="onLoCC4" type="midi7Bit" />
        <xs:attribute name="onLoCC5" type="midi7Bit" />
        <xs:attribute name="onLoCC6" type="midi7Bit" />
        <xs:attribute name="onLoCC7" type="midi7Bit" />
        <xs:attribute name="onLoCC8" type="midi7Bit" />
        <xs:attribute name="onLoCC9" type="midi7Bit" />
        <xs:attribute name="onLoCC10" type="midi7Bit" />
        <xs:attribute name="onLoCC11" type="midi7Bit" />
        <xs:attribute name="onLoCC12" type="midi7Bit" />
        <xs:attribute name="onLoCC13" type="midi7Bit" />
        <xs:attribute name="onLoCC14" type="midi7Bit" />
        <xs:attribute name="onLoCC15" type="midi7Bit" />
        <xs:attribute name="onLoCC16" type="midi7Bit" />
        <xs:attribute name="onLoCC17" type="midi7Bit" />
        <xs:attribute name="onLoCC18" type="midi7Bit" />
        <xs:attribute name="onLoCC19" type="midi7Bit" />
        <xs:attribute name="onLoCC20" type="midi7Bit" />
        <xs:attribute name="onLoCC21" type="midi7Bit" />
        <xs:attribute name="onLoCC22" type="midi7Bit" />
        <xs:attribute name="onLoCC23" type="midi7Bit" />
        <xs:attribute name="onLoCC24" type="midi7Bit" />
        <xs:attribute name="onLoCC25" type="midi7Bit" />
        <xs:attribute name="onLoCC26" type="midi7Bit" />
        <xs:attribute name="onLoCC27" type="midi7Bit" />
        <xs:attribute name="onLoCC28" type="midi7Bit" />
        <xs:attribute name="onLoCC29" type="midi7Bit" />
        <xs:attribute name="onLoCC30" type="midi7Bit" />
        <xs:attribute name="onLoCC31" type="midi7Bit" />
        <xs:attribute name="onLoCC32" type="midi7Bit" />
        <xs:attribute name="onLoCC33" type="midi7Bit" />
        <xs:attribute name="onLoCC34" type="midi7Bit" />
        <xs:attribute name="onLoCC35" type="midi7Bit" />
        <xs:attribute name="onLoCC36" type="midi7Bit" />
        <xs:attribute name="onLoCC37" type="midi7Bit" />
        <xs:attribute name="onLoCC38" type="midi7Bit" />
        <xs:attribute name="onLoCC39" type="midi7Bit" />
        <xs:attribute name="onLoCC40" type="midi7Bit" />
        <xs:attribute name="onLoCC41" type="midi7Bit" />
        <xs:attribute name="onLoCC42" type="midi7Bit" />
        <xs:attribute name="onLoCC43" type="midi7Bit" />
        <xs:attribute name="onLoCC44" type="midi7Bit" />
        <xs:attribute name="onLoCC45" type="midi7Bit" />
        <xs:attribute name="onLoCC46" type="midi7Bit" />
        <xs:attribute name="onLoCC47" type="midi7Bit" />
        <xs:attribute name="onLoCC48" type="midi7Bit" />
        <xs:attribute name="onLoCC49" type="midi7Bit" />
        <xs:attribute name="onLoCC50" type="midi7Bit" />
        <xs:attribute name="onLoCC51" type="midi7Bit" />
        <xs:attribute name="onLoCC52" type="midi7Bit" />
        <xs:attribute name="onLoCC53" type="midi7Bit" />
        <xs:attribute name="onLoCC54" type="midi7Bit" />
        <xs:attribute name="onLoCC55" type="midi7Bit" />
        <xs:attribute name="onLoCC56" type="midi7Bit" />
        <xs:attribute name="onLoCC57" type="midi7Bit" />
        <xs:attribute name="onLoCC58" type="midi7Bit" />
        <xs:attribute name="onLoCC59" type="midi7Bit" />
        <xs:attribute name="onLoCC60" type="midi7Bit" />
        <xs:attribute name="onLoCC61" type="midi7Bit" />
        <xs:attribute name="onLoCC62" type="midi7Bit" />
        <xs:attribute name="onLoCC63" type="midi7Bit" />
        <xs:attribute name="onLoCC64" type="midi7Bit" />
        <xs:attribute name="onLoCC65" type="midi7Bit" />
        <xs:attribute name="onLoCC66" type="midi7Bit" />
        <xs:attribute name="onLoCC67" type="midi7Bit" />
        <xs:attribute name="onLoCC68" type="midi7Bit" />
        <xs:attribute name="onLoCC69" type="midi7Bit" />
        <xs:attribute name="onLoCC70" type="midi7Bit" />
        <xs:attribute name="onLoCC71" type="midi7Bit" />
        <xs:attribute name="onLoCC72" type="midi7Bit" />
        <xs:attribute name="onLoCC73" type="midi7Bit" />
        <xs:attribute name="onLoCC74" type="midi7Bit" />
        <xs:attribute name="onLoCC75" type="midi7Bit" />
        <xs:attribute name="onLoCC76" type="midi7Bit" />
        <xs:attribute name="onLoCC77" type="midi7Bit" />
        <xs:attribute name="onLoCC78" type="midi7Bit" />
        <xs:attribute name="onLoCC79" type="midi7Bit" />
        <xs:attribute name="onLoCC80" type="midi7Bit" />
        <xs:attribute name="onLoCC81" type="midi7Bit" />
        <xs:attribute name="onLoCC82" type="midi7Bit" />
        <xs:attribute name="onLoCC83" type="midi7Bit" />
        <xs:attribute name="onLoCC84" type="midi7Bit" />
        <xs:attribute name="onLoCC85" type="midi7Bit" />
        <xs:attribute name="onLoCC86" type="midi7Bit" />
        <xs:attribute name="onLoCC87" type="midi7Bit" />
        <xs:attribute name="onLoCC88" type="midi7Bit" />
        <xs:attribute name="onLoCC89" type="midi7Bit" />
        <xs:attribute name="onLoCC90" type="midi7Bit" />
        <xs:attribute name="onLoCC91" type="midi7Bit" />
        <xs:attribute name="onLoCC92" type="midi7Bit" />
        <xs:attribute name="onLoCC93" type="midi7Bit" />
        <xs:attribute name="onLoCC94" type="midi7Bit" />
        <xs:attribute name="onLoCC95" type="midi7Bit" />
        <xs:attribute name="onLoCC96" type="midi7Bit" />
        <xs:attribute name="onLoCC97" type="midi7Bit" />
        <xs:attribute name="onLoCC98" type="midi7Bit" />
        <xs:attribute name="onLoCC99" type="midi7Bit" />
        <xs:attribute name="onLoCC100" type="midi7Bit" />
        <xs:attribute name="onLoCC101" type="midi7Bit" />
        <xs:attribute name="onLoCC102" type="midi7Bit" />
        <xs:attribute name="onLoCC103" type="midi7Bit" />
        <xs:attribute name="onLoCC104" type="midi7Bit" />
        <xs:attribute name="onLoCC105" type="midi7Bit" />
        <xs:attribute name="onLoCC106" type="midi7Bit" />
        <xs:attribute name="onLoCC107" type="midi7Bit" />
        <xs:attribute name="onLoCC108" type="midi7Bit" />
        <xs:attribute name="onLoCC109" type="midi7Bit" />
        <xs:attribute name="onLoCC110" type="midi7Bit" />
        <xs:attribute name="onLoCC111" type="midi7Bit" />
        <xs:attribute name="onLoCC112" type="midi7Bit" />
        <xs:attribute name="onLoCC113" type="midi7Bit" />
        <xs:attribute name="onLoCC114" type="midi7Bit" />
        <xs:attribute name="onLoCC115" type="midi7Bit" />
        <xs:attribute name="onLoCC116" type="midi7Bit" />
        <xs:attribute name="onLoCC117" type="midi7Bit" />
        <xs:attribute name="onLoCC118" type="midi7Bit" />
        <xs:attribute name="onLoCC119" type="midi7Bit" />
        <xs:attribute name="onLoCC120" type="midi7Bit" />
        <xs:attribute name="onLoCC121" type="midi7Bit" />
        <xs:attribute name="onLoCC122" type="midi7Bit" />
        <xs:attribute name="onLoCC123" type="midi7Bit" />
        <xs:attribute name="onLoCC124" type="midi7Bit" />
        <xs:attribute name="onLoCC125" type="midi7Bit" />
        <xs:attribute name="onLoCC126" type="midi7Bit" />
        <xs:attribute name="onLoCC127" type="midi7Bit" />

        <xs:attribute name="onHiCC1" type="midi7Bit" />
        <xs:attribute name="onHiCC2" type="midi7Bit" />
        <xs:attribute name="onHiCC3" type="midi7Bit" />
        <xs:attribute name="onHiCC4" type="midi7Bit" />
        <xs:attribute name="onHiCC5" type="midi7Bit" />
        <xs:attribute name="onHiCC6" type="midi7Bit" />
        <xs:attribute name="onHiCC7" type="midi7Bit" />
        <xs:attribute name="onHiCC8" type="midi7Bit" />
        <xs:attribute name="onHiCC9" type="midi7Bit" />
        <xs:attribute name="onHiCC10" type="midi7Bit" />
        <xs:attribute name="onHiCC11" type="midi7Bit" />
        <xs:attribute name="onHiCC12" type="midi7Bit" />
        <xs:attribute name="onHiCC13" type="midi7Bit" />
        <xs:attribute name="onHiCC14" type="midi7Bit" />
        <xs:attribute name="onHiCC15" type="midi7Bit" />
        <xs:attribute name="onHiCC16" type="midi7Bit" />
        <xs:attribute name="onHiCC17" type="midi7Bit" />
        <xs:attribute name="onHiCC18" type="midi7Bit" />
        <xs:attribute name="onHiCC19" type="midi7Bit" />
        <xs:attribute name="onHiCC20" type="midi7Bit" />
        <xs:attribute name="onHiCC21" type="midi7Bit" />
        <xs:attribute name="onHiCC22" type="midi7Bit" />
        <xs:attribute name="onHiCC23" type="midi7Bit" />
        <xs:attribute name="onHiCC24" type="midi7Bit" />
        <xs:attribute name="onHiCC25" type="midi7Bit" />
        <xs:attribute name="onHiCC26" type="midi7Bit" />
        <xs:attribute name="onHiCC27" type="midi7Bit" />
        <xs:attribute name="onHiCC28" type="midi7Bit" />
        <xs:attribute name="onHiCC29" type="midi7Bit" />
        <xs:attribute name="onHiCC30" type="midi7Bit" />
        <xs:attribute name="onHiCC31" type="midi7Bit" />
        <xs:attribute name="onHiCC32" type="midi7Bit" />
        <xs:attribute name="onHiCC33" type="midi7Bit" />
        <xs:attribute name="onHiCC34" type="midi7Bit" />
        <xs:attribute name="onHiCC35" type="midi7Bit" />
        <xs:attribute name="onHiCC36" type="midi7Bit" />
        <xs:attribute name="onHiCC37" type="midi7Bit" />
        <xs:attribute name="onHiCC38" type="midi7Bit" />
        <xs:attribute name="onHiCC39" type="midi7Bit" />
        <xs:attribute name="onHiCC40" type="midi7Bit" />
        <xs:attribute name="onHiCC41" type="midi7Bit" />
        <xs:attribute name="onHiCC42" type="midi7Bit" />
        <xs:attribute name="onHiCC43" type="midi7Bit" />
        <xs:attribute name="onHiCC44" type="midi7Bit" />
        <xs:attribute name="onHiCC45" type="midi7Bit" />
        <xs:attribute name="onHiCC46" type="midi7Bit" />
        <xs:attribute name="onHiCC47" type="midi7Bit" />
        <xs:attribute name="onHiCC48" type="midi7Bit" />
        <xs:attribute name="onHiCC49" type="midi7Bit" />
        <xs:attribute name="onHiCC50" type="midi7Bit" />
        <xs:attribute name="onHiCC51" type="midi7Bit" />
        <xs:attribute name="onHiCC52" type="midi7Bit" />
        <xs:attribute name="onHiCC53" type="midi7Bit" />
        <xs:attribute name="onHiCC54" type="midi7Bit" />
        <xs:attribute name="onHiCC55" type="midi7Bit" />
        <xs:attribute name="onHiCC56" type="midi7Bit" />
        <xs:attribute name="onHiCC57" type="midi7Bit" />
        <xs:attribute name="onHiCC58" type="midi7Bit" />
        <xs:attribute name="onHiCC59" type="midi7Bit" />
        <xs:attribute name="onHiCC60" type="midi7Bit" />
        <xs:attribute name="onHiCC61" type="midi7Bit" />
        <xs:attribute name="onHiCC62" type="midi7Bit" />
        <xs:attribute name="onHiCC63" type="midi7Bit" />
        <xs:attribute name="onHiCC64" type="midi7Bit" />
        <xs:attribute name="onHiCC65" type="midi7Bit" />
        <xs:attribute name="onHiCC66" type="midi7Bit" />
        <xs:attribute name="onHiCC67" type="midi7Bit" />
        <xs:attribute name="onHiCC68" type="midi7Bit" />
        <xs:attribute name="onHiCC69" type="midi7Bit" />
        <xs:attribute name="onHiCC70" type="midi7Bit" />
        <xs:attribute name="onHiCC71" type="midi7Bit" />
        <xs:attribute name="onHiCC72" type="midi7Bit" />
        <xs:attribute name="onHiCC73" type="midi7Bit" />
        <xs:attribute name="onHiCC74" type="midi7Bit" />
        <xs:attribute name="onHiCC75" type="midi7Bit" />
        <xs:attribute name="onHiCC76" type="midi7Bit" />
        <xs:attribute name="onHiCC77" type="midi7Bit" />
        <xs:attribute name="onHiCC78" type="midi7Bit" />
        <xs:attribute name="onHiCC79" type="midi7Bit" />
        <xs:attribute name="onHiCC80" type="midi7Bit" />
        <xs:attribute name="onHiCC81" type="midi7Bit" />
        <xs:attribute name="onHiCC82" type="midi7Bit" />
        <xs:attribute name="onHiCC83" type="midi7Bit" />
        <xs:attribute name="onHiCC84" type="midi7Bit" />
        <xs:attribute name="onHiCC85" type="midi7Bit" />
        <xs:attribute name="onHiCC86" type="midi7Bit" />
        <xs:attribute name="onHiCC87" type="midi7Bit" />
        <xs:attribute name="onHiCC88" type="midi7Bit" />
        <xs:attribute name="onHiCC89" type="midi7Bit" />
        <xs:attribute name="onHiCC90" type="midi7Bit" />
        <xs:attribute name="onHiCC91" type="midi7Bit" />
        <xs:attribute name="onHiCC92" type="midi7Bit" />
        <xs:attribute name="onHiCC93" type="midi7Bit" />
        <xs:attribute name="onHiCC94" type="midi7Bit" />
        <xs:attribute name="onHiCC95" type="midi7Bit" />
        <xs:attribute name="onHiCC96" type="midi7Bit" />
        <xs:attribute name="onHiCC97" type="midi7Bit" />
        <xs:attribute name="onHiCC98" type="midi7Bit" />
        <xs:attribute name="onHiCC99" type="midi7Bit" />
        <xs:attribute name="onHiCC100" type="midi7Bit" />
        <xs:attribute name="onHiCC101" type="midi7Bit" />
        <xs:attribute name="onHiCC102" type="midi7Bit" />
        <xs:attribute name="onHiCC103" type="midi7Bit" />
        <xs:attribute name="onHiCC104" type="midi7Bit" />
        <xs:attribute name="onHiCC105" type="midi7Bit" />
        <xs:attribute name="onHiCC106" type="midi7Bit" />
        <xs:attribute name="onHiCC107" type="midi7Bit" />
        <xs:attribute name="onHiCC108" type="midi7Bit" />
        <xs:attribute name="onHiCC109" type="midi7Bit" />
        <xs:attribute name="onHiCC110" type="midi7Bit" />
        <xs:attribute name="onHiCC111" type="midi7Bit" />
        <xs:attribute name="onHiCC112" type="midi7Bit" />
        <xs:attribute name="onHiCC113" type="midi7Bit" />
        <xs:attribute name="onHiCC114" type="midi7Bit" />
        <xs:attribute name="onHiCC115" type="midi7Bit" />
        <xs:attribute name="onHiCC116" type="midi7Bit" />
        <xs:attribute name="onHiCC117" type="midi7Bit" />
        <xs:attribute name="onHiCC118" type="midi7Bit" />
        <xs:attribute name="onHiCC119" type="midi7Bit" />
        <xs:attribute name="onHiCC120" type="midi7Bit" />
        <xs:attribute name="onHiCC121" type="midi7Bit" />
        <xs:attribute name="onHiCC122" type="midi7Bit" />
        <xs:attribute name="onHiCC123" type="midi7Bit" />
        <xs:attribute name="onHiCC124" type="midi7Bit" />
        <xs:attribute name="onHiCC125" type="midi7Bit" />
        <xs:attribute name="onHiCC126" type="midi7Bit" />
        <xs:attribute name="onHiCC127" type="midi7Bit" />
    </xs:attributeGroup>

<!--=================================-->

    <xs:attributeGroup name="loHiCCGroup">
        <xs:attribute name="loCC1" type="midi7Bit" />
        <xs:attribute name="loCC2" type="midi7Bit" />
        <xs:attribute name="loCC3" type="midi7Bit" />
        <xs:attribute name="loCC4" type="midi7Bit" />
        <xs:attribute name="loCC5" type="midi7Bit" />
        <xs:attribute name="loCC6" type="midi7Bit" />
        <xs:attribute name="loCC7" type="midi7Bit" />
        <xs:attribute name="loCC8" type="midi7Bit" />
        <xs:attribute name="loCC9" type="midi7Bit" />
        <xs:attribute name="loCC10" type="midi7Bit" />
        <xs:attribute name="loCC11" type="midi7Bit" />
        <xs:attribute name="loCC12" type="midi7Bit" />
        <xs:attribute name="loCC13" type="midi7Bit" />
        <xs:attribute name="loCC14" type="midi7Bit" />
        <xs:attribute name="loCC15" type="midi7Bit" />
        <xs:attribute name="loCC16" type="midi7Bit" />
        <xs:attribute name="loCC17" type="midi7Bit" />
        <xs:attribute name="loCC18" type="midi7Bit" />
        <xs:attribute name="loCC19" type="midi7Bit" />
        <xs:attribute name="loCC20" type="midi7Bit" />
        <xs:attribute name="loCC21" type="midi7Bit" />
        <xs:attribute name="loCC22" type="midi7Bit" />
        <xs:attribute name="loCC23" type="midi7Bit" />
        <xs:attribute name="loCC24" type="midi7Bit" />
        <xs:attribute name="loCC25" type="midi7Bit" />
        <xs:attribute name="loCC26" type="midi7Bit" />
        <xs:attribute name="loCC27" type="midi7Bit" />
        <xs:attribute name="loCC28" type="midi7Bit" />
        <xs:attribute name="loCC29" type="midi7Bit" />
        <xs:attribute name="loCC30" type="midi7Bit" />
        <xs:attribute name="loCC31" type="midi7Bit" />
        <xs:attribute name="loCC32" type="midi7Bit" />
        <xs:attribute name="loCC33" type="midi7Bit" />
        <xs:attribute name="loCC34" type="midi7Bit" />
        <xs:attribute name="loCC35" type="midi7Bit" />
        <xs:attribute name="loCC36" type="midi7Bit" />
        <xs:attribute name="loCC37" type="midi7Bit" />
        <xs:attribute name="loCC38" type="midi7Bit" />
        <xs:attribute name="loCC39" type="midi7Bit" />
        <xs:attribute name="loCC40" type="midi7Bit" />
        <xs:attribute name="loCC41" type="midi7Bit" />
        <xs:attribute name="loCC42" type="midi7Bit" />
        <xs:attribute name="loCC43" type="midi7Bit" />
        <xs:attribute name="loCC44" type="midi7Bit" />
        <xs:attribute name="loCC45" type="midi7Bit" />
        <xs:attribute name="loCC46" type="midi7Bit" />
        <xs:attribute name="loCC47" type="midi7Bit" />
        <xs:attribute name="loCC48" type="midi7Bit" />
        <xs:attribute name="loCC49" type="midi7Bit" />
        <xs:attribute name="loCC50" type="midi7Bit" />
        <xs:attribute name="loCC51" type="midi7Bit" />
        <xs:attribute name="loCC52" type="midi7Bit" />
        <xs:attribute name="loCC53" type="midi7Bit" />
        <xs:attribute name="loCC54" type="midi7Bit" />
        <xs:attribute name="loCC55" type="midi7Bit" />
        <xs:attribute name="loCC56" type="midi7Bit" />
        <xs:attribute name="loCC57" type="midi7Bit" />
        <xs:attribute name="loCC58" type="midi7Bit" />
        <xs:attribute name="loCC59" type="midi7Bit" />
        <xs:attribute name="loCC60" type="midi7Bit" />
        <xs:attribute name="loCC61" type="midi7Bit" />
        <xs:attribute name="loCC62" type="midi7Bit" />
        <xs:attribute name="loCC63" type="midi7Bit" />
        <xs:attribute name="loCC64" type="midi7Bit" />
        <xs:attribute name="loCC65" type="midi7Bit" />
        <xs:attribute name="loCC66" type="midi7Bit" />
        <xs:attribute name="loCC67" type="midi7Bit" />
        <xs:attribute name="loCC68" type="midi7Bit" />
        <xs:attribute name="loCC69" type="midi7Bit" />
        <xs:attribute name="loCC70" type="midi7Bit" />
        <xs:attribute name="loCC71" type="midi7Bit" />
        <xs:attribute name="loCC72" type="midi7Bit" />
        <xs:attribute name="loCC73" type="midi7Bit" />
        <xs:attribute name="loCC74" type="midi7Bit" />
        <xs:attribute name="loCC75" type="midi7Bit" />
        <xs:attribute name="loCC76" type="midi7Bit" />
        <xs:attribute name="loCC77" type="midi7Bit" />
        <xs:attribute name="loCC78" type="midi7Bit" />
        <xs:attribute name="loCC79" type="midi7Bit" />
        <xs:attribute name="loCC80" type="midi7Bit" />
        <xs:attribute name="loCC81" type="midi7Bit" />
        <xs:attribute name="loCC82" type="midi7Bit" />
        <xs:attribute name="loCC83" type="midi7Bit" />
        <xs:attribute name="loCC84" type="midi7Bit" />
        <xs:attribute name="loCC85" type="midi7Bit" />
        <xs:attribute name="loCC86" type="midi7Bit" />
        <xs:attribute name="loCC87" type="midi7Bit" />
        <xs:attribute name="loCC88" type="midi7Bit" />
        <xs:attribute name="loCC89" type="midi7Bit" />
        <xs:attribute name="loCC90" type="midi7Bit" />
        <xs:attribute name="loCC91" type="midi7Bit" />
        <xs:attribute name="loCC92" type="midi7Bit" />
        <xs:attribute name="loCC93" type="midi7Bit" />
        <xs:attribute name="loCC94" type="midi7Bit" />
        <xs:attribute name="loCC95" type="midi7Bit" />
        <xs:attribute name="loCC96" type="midi7Bit" />
        <xs:attribute name="loCC97" type="midi7Bit" />
        <xs:attribute name="loCC98" type="midi7Bit" />
        <xs:attribute name="loCC99" type="midi7Bit" />
        <xs:attribute name="loCC100" type="midi7Bit" />
        <xs:attribute name="loCC101" type="midi7Bit" />
        <xs:attribute name="loCC102" type="midi7Bit" />
        <xs:attribute name="loCC103" type="midi7Bit" />
        <xs:attribute name="loCC104" type="midi7Bit" />
        <xs:attribute name="loCC105" type="midi7Bit" />
        <xs:attribute name="loCC106" type="midi7Bit" />
        <xs:attribute name="loCC107" type="midi7Bit" />
        <xs:attribute name="loCC108" type="midi7Bit" />
        <xs:attribute name="loCC109" type="midi7Bit" />
        <xs:attribute name="loCC110" type="midi7Bit" />
        <xs:attribute name="loCC111" type="midi7Bit" />
        <xs:attribute name="loCC112" type="midi7Bit" />
        <xs:attribute name="loCC113" type="midi7Bit" />
        <xs:attribute name="loCC114" type="midi7Bit" />
        <xs:attribute name="loCC115" type="midi7Bit" />
        <xs:attribute name="loCC116" type="midi7Bit" />
        <xs:attribute name="loCC117" type="midi7Bit" />
        <xs:attribute name="loCC118" type="midi7Bit" />
        <xs:attribute name="loCC119" type="midi7Bit" />
        <xs:attribute name="loCC120" type="midi7Bit" />
        <xs:attribute name="loCC121" type="midi7Bit" />
        <xs:attribute name="loCC122" type="midi7Bit" />
        <xs:attribute name="loCC123" type="midi7Bit" />
        <xs:attribute name="loCC124" type="midi7Bit" />
        <xs:attribute name="loCC125" type="midi7Bit" />
        <xs:attribute name="loCC126" type="midi7Bit" />
        <xs:attribute name="loCC127" type="midi7Bit" />

        <xs:attribute name="hiCC1" type="midi7Bit" />
        <xs:attribute name="hiCC2" type="midi7Bit" />
        <xs:attribute name="hiCC3" type="midi7Bit" />
        <xs:attribute name="hiCC4" type="midi7Bit" />
        <xs:attribute name="hiCC5" type="midi7Bit" />
        <xs:attribute name="hiCC6" type="midi7Bit" />
        <xs:attribute name="hiCC7" type="midi7Bit" />
        <xs:attribute name="hiCC8" type="midi7Bit" />
        <xs:attribute name="hiCC9" type="midi7Bit" />
        <xs:attribute name="hiCC10" type="midi7Bit" />
        <xs:attribute name="hiCC11" type="midi7Bit" />
        <xs:attribute name="hiCC12" type="midi7Bit" />
        <xs:attribute name="hiCC13" type="midi7Bit" />
        <xs:attribute name="hiCC14" type="midi7Bit" />
        <xs:attribute name="hiCC15" type="midi7Bit" />
        <xs:attribute name="hiCC16" type="midi7Bit" />
        <xs:attribute name="hiCC17" type="midi7Bit" />
        <xs:attribute name="hiCC18" type="midi7Bit" />
        <xs:attribute name="hiCC19" type="midi7Bit" />
        <xs:attribute name="hiCC20" type="midi7Bit" />
        <xs:attribute name="hiCC21" type="midi7Bit" />
        <xs:attribute name="hiCC22" type="midi7Bit" />
        <xs:attribute name="hiCC23" type="midi7Bit" />
        <xs:attribute name="hiCC24" type="midi7Bit" />
        <xs:attribute name="hiCC25" type="midi7Bit" />
        <xs:attribute name="hiCC26" type="midi7Bit" />
        <xs:attribute name="hiCC27" type="midi7Bit" />
        <xs:attribute name="hiCC28" type="midi7Bit" />
        <xs:attribute name="hiCC29" type="midi7Bit" />
        <xs:attribute name="hiCC30" type="midi7Bit" />
        <xs:attribute name="hiCC31" type="midi7Bit" />
        <xs:attribute name="hiCC32" type="midi7Bit" />
        <xs:attribute name="hiCC33" type="midi7Bit" />
        <xs:attribute name="hiCC34" type="midi7Bit" />
        <xs:attribute name="hiCC35" type="midi7Bit" />
        <xs:attribute name="hiCC36" type="midi7Bit" />
        <xs:attribute name="hiCC37" type="midi7Bit" />
        <xs:attribute name="hiCC38" type="midi7Bit" />
        <xs:attribute name="hiCC39" type="midi7Bit" />
        <xs:attribute name="hiCC40" type="midi7Bit" />
        <xs:attribute name="hiCC41" type="midi7Bit" />
        <xs:attribute name="hiCC42" type="midi7Bit" />
        <xs:attribute name="hiCC43" type="midi7Bit" />
        <xs:attribute name="hiCC44" type="midi7Bit" />
        <xs:attribute name="hiCC45" type="midi7Bit" />
        <xs:attribute name="hiCC46" type="midi7Bit" />
        <xs:attribute name="hiCC47" type="midi7Bit" />
        <xs:attribute name="hiCC48" type="midi7Bit" />
        <xs:attribute name="hiCC49" type="midi7Bit" />
        <xs:attribute name="hiCC50" type="midi7Bit" />
        <xs:attribute name="hiCC51" type="midi7Bit" />
        <xs:attribute name="hiCC52" type="midi7Bit" />
        <xs:attribute name="hiCC53" type="midi7Bit" />
        <xs:attribute name="hiCC54" type="midi7Bit" />
        <xs:attribute name="hiCC55" type="midi7Bit" />
        <xs:attribute name="hiCC56" type="midi7Bit" />
        <xs:attribute name="hiCC57" type="midi7Bit" />
        <xs:attribute name="hiCC58" type="midi7Bit" />
        <xs:attribute name="hiCC59" type="midi7Bit" />
        <xs:attribute name="hiCC60" type="midi7Bit" />
        <xs:attribute name="hiCC61" type="midi7Bit" />
        <xs:attribute name="hiCC62" type="midi7Bit" />
        <xs:attribute name="hiCC63" type="midi7Bit" />
        <xs:attribute name="hiCC64" type="midi7Bit" />
        <xs:attribute name="hiCC65" type="midi7Bit" />
        <xs:attribute name="hiCC66" type="midi7Bit" />
        <xs:attribute name="hiCC67" type="midi7Bit" />
        <xs:attribute name="hiCC68" type="midi7Bit" />
        <xs:attribute name="hiCC69" type="midi7Bit" />
        <xs:attribute name="hiCC70" type="midi7Bit" />
        <xs:attribute name="hiCC71" type="midi7Bit" />
        <xs:attribute name="hiCC72" type="midi7Bit" />
        <xs:attribute name="hiCC73" type="midi7Bit" />
        <xs:attribute name="hiCC74" type="midi7Bit" />
        <xs:attribute name="hiCC75" type="midi7Bit" />
        <xs:attribute name="hiCC76" type="midi7Bit" />
        <xs:attribute name="hiCC77" type="midi7Bit" />
        <xs:attribute name="hiCC78" type="midi7Bit" />
        <xs:attribute name="hiCC79" type="midi7Bit" />
        <xs:attribute name="hiCC80" type="midi7Bit" />
        <xs:attribute name="hiCC81" type="midi7Bit" />
        <xs:attribute name="hiCC82" type="midi7Bit" />
        <xs:attribute name="hiCC83" type="midi7Bit" />
        <xs:attribute name="hiCC84" type="midi7Bit" />
        <xs:attribute name="hiCC85" type="midi7Bit" />
        <xs:attribute name="hiCC86" type="midi7Bit" />
        <xs:attribute name="hiCC87" type="midi7Bit" />
        <xs:attribute name="hiCC88" type="midi7Bit" />
        <xs:attribute name="hiCC89" type="midi7Bit" />
        <xs:attribute name="hiCC90" type="midi7Bit" />
        <xs:attribute name="hiCC91" type="midi7Bit" />
        <xs:attribute name="hiCC92" type="midi7Bit" />
        <xs:attribute name="hiCC93" type="midi7Bit" />
        <xs:attribute name="hiCC94" type="midi7Bit" />
        <xs:attribute name="hiCC95" type="midi7Bit" />
        <xs:attribute name="hiCC96" type="midi7Bit" />
        <xs:attribute name="hiCC97" type="midi7Bit" />
        <xs:attribute name="hiCC98" type="midi7Bit" />
        <xs:attribute name="hiCC99" type="midi7Bit" />
        <xs:attribute name="hiCC100" type="midi7Bit" />
        <xs:attribute name="hiCC101" type="midi7Bit" />
        <xs:attribute name="hiCC102" type="midi7Bit" />
        <xs:attribute name="hiCC103" type="midi7Bit" />
        <xs:attribute name="hiCC104" type="midi7Bit" />
        <xs:attribute name="hiCC105" type="midi7Bit" />
        <xs:attribute name="hiCC106" type="midi7Bit" />
        <xs:attribute name="hiCC107" type="midi7Bit" />
        <xs:attribute name="hiCC108" type="midi7Bit" />
        <xs:attribute name="hiCC109" type="midi7Bit" />
        <xs:attribute name="hiCC110" type="midi7Bit" />
        <xs:attribute name="hiCC111" type="midi7Bit" />
        <xs:attribute name="hiCC112" type="midi7Bit" />
        <xs:attribute name="hiCC113" type="midi7Bit" />
        <xs:attribute name="hiCC114" type="midi7Bit" />
        <xs:attribute name="hiCC115" type="midi7Bit" />
        <xs:attribute name="hiCC116" type="midi7Bit" />
        <xs:attribute name="hiCC117" type="midi7Bit" />
        <xs:attribute name="hiCC118" type="midi7Bit" />
        <xs:attribute name="hiCC119" type="midi7Bit" />
        <xs:attribute name="hiCC120" type="midi7Bit" />
        <xs:attribute name="hiCC121" type="midi7Bit" />
        <xs:attribute name="hiCC122" type="midi7Bit" />
        <xs:attribute name="hiCC123" type="midi7Bit" />
        <xs:attribute name="hiCC124" type="midi7Bit" />
        <xs:attribute name="hiCC125" type="midi7Bit" />
        <xs:attribute name="hiCC126" type="midi7Bit" />
        <xs:attribute name="hiCC127" type="midi7Bit" />
    </xs:attributeGroup>

</xs:schema>