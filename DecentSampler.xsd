<?xml version="1.0" encoding="UTF-8"?>
<!--
XML Schema Definition for DecentSampler preset files.

Based on David Hilowitz's Decent Sampler documentation:
https://www.decentsamples.com/wp-content/uploads/2020/06/format-documentation.html


MIT License

Copyright (c) 2022 Praash

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

-->

<!--
================================================================
    Main structure
================================================================
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="DecentSampler">
    <xs:element name="DecentSampler">
        <xs:complexType>
            <xs:choice maxOccurs="unbounded">
                <xs:element name="ui" type="ui" />
                <xs:element name="groups" type="groups" minOccurs="1"></xs:element>
                <xs:element name="tags" type="tags"/>
                <xs:element name="effects" type="effects" />
                <xs:element name="midi" type="midi" />
            </xs:choice>

            <xs:attribute name="minVersion" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
(optional): This is the minimum version on which this preset is known to run.
If a user is running an old version of DS, and a developer has specified a minVersion for their instrument, a dialog box will show up telling users that their version is outdated and that they should upgrade in order to get the full effect.
They can than choose to ignore this warning or hit download.
The dialog box does not show up for iOS users as most of them have auto-updates turned on.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>

            <xs:attribute name="pluginVersion" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
(undocumented): a possible alternative to `minVersion`, found in some DecentSamples presets.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<!--
================================================================
    Type definitions
================================================================
-->
    <xs:complexType name="ui">
        <xs:annotation>
            <xs:documentation>
The `ui` element is how you specify a user interface for your instrument.
Each dspreset should have at most one `ui` element.
            </xs:documentation>
        </xs:annotation>

        <xs:sequence maxOccurs="unbounded">
            <xs:element name="tab" type="tab" />
        </xs:sequence>

        <xs:attribute name="bgColor" type="hexARGB">
            <xs:annotation>
                <xs:documentation>
An eight digit hex value indicating the background color to be used for the background of the UI.
This color will be drawn underneath any background image specified by `bgImage`.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="bgImage" type="relativeFilePath">
            <xs:annotation>
                <xs:documentation>
A relative path to a background image to use.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="coverArt" type="relativeFilePath">
            <xs:annotation>
                <xs:documentation>
A relative path to a cover art image to use.
After the first time this library is opened, this will get displayed on the “My Libraries” tab.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="width" type="xs:integer" use="required">
            <xs:annotation>
                <xs:documentation>
The width of your user interface.
Recommended value: `812`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="height" type="xs:integer" use="required">
            <xs:annotation>
                <xs:documentation>
The height of your user interface.
Recommended value: `375`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="layoutMode" />
        <xs:attribute name="bgMode" />
    </xs:complexType>


    <xs:complexType name="tab">
        <xs:annotation>
            <xs:documentation>
We may, at some point, add support for multiple tabs.
At present it is only possible to have a single tab within DecentSampler instruments.
As such, every UI must have at most one `tab` element.
            </xs:documentation>
        </xs:annotation>

        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="menu" type="menu" minOccurs="0" maxOccurs="unbounded" />
            <xs:element name="labeled-knob" type="labeled-knob" minOccurs="0" maxOccurs="unbounded" />
            <xs:element name="control" type="control" minOccurs="0" maxOccurs="unbounded" />
            <xs:element name="label" type="label" minOccurs="0" maxOccurs="unbounded" />
        </xs:choice>

        <xs:attribute name="name">
            <xs:annotation>
                <xs:documentation>
An optional name to be associated with this tab.
This is currently not displayed anywhere.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>


    <xs:complexType name="labeled-knob">
        <xs:annotation>
            <xs:documentation>
A user control widget containing a built-in label.
For precise UI creation, it may be advisable to use a combination of `control` and `label` elements rather than `labeled-knob`.
            </xs:documentation>
        </xs:annotation>

        <xs:sequence>
            <xs:element name="binding" type="binding" />
        </xs:sequence>

        <xs:attributeGroup ref="controlProperties" />
        <xs:attributeGroup ref="textProperties" />
        <xs:attributeGroup ref="widgetGeometry" />
    </xs:complexType>

    <xs:complexType name="control">
        <xs:annotation>
            <xs:documentation>
A user control widget without a built-in label.
            </xs:documentation>
        </xs:annotation>

        <xs:sequence minOccurs="0">
            <xs:element name="binding" type="binding" />
        </xs:sequence>

        <xs:attributeGroup ref="controlProperties" />
        <xs:attributeGroup ref="textProperties" />
        <xs:attributeGroup ref="widgetGeometry" />
    </xs:complexType>


    <xs:complexType name="menu">
        <xs:annotation>
            <xs:documentation>
A drop-down menu within your UI.
In order for your drop-down menu to have options, it must contain `option` elements.
            </xs:documentation>
        </xs:annotation>

        <xs:sequence>
            <xs:element name="option" type="option"></xs:element>
        </xs:sequence>

        <xs:attribute name="value" type="xs:integer">
            <xs:annotation>
                <xs:documentation>
The is the 1-based index of the menu option that is currently selected.
NOTE: Index numbers for menu items start at `1`.
A value of `0` means that no item is selected.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attributeGroup ref="widgetGeometry" />
    </xs:complexType>


    <xs:complexType name="option">
        <xs:annotation>
            <xs:documentation>
*That's right*.
The `option` element has only one attribute.
In order to have your `option` elements actually do something useful, you need to attach bindings to them.
            </xs:documentation>
        </xs:annotation>

        <xs:sequence>
            <xs:element name="binding" type="binding" minOccurs="0" />
        </xs:sequence>

        <xs:attribute name="name">
            <xs:annotation>
                <xs:documentation>
The name of this option.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="binding">
        <xs:annotation><xs:documentation>
Adding a binding to a UI control tells the DecentSampler engine that it should take input from a source and use it to change values in another part of the engine.
An example of this would be a knob which controls the volume of a group or a CC controller that changes an effect parameter.
        </xs:documentation></xs:annotation>

        <xs:attribute name="type" use="required">
            <xs:annotation><xs:documentation>
This tells the engine what type of parameter this is.
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="amp" />
                    <xs:enumeration value="effect" />
                    <xs:enumeration value="control" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>

        <xs:attribute name="level" use="required">
            <xs:annotation><xs:documentation>
The level (or "scope") at which the binding affects a parameter.

`instrument`: the whole instrument
`group`: a single group, at the index of the `position` attribute
`ui`: an UI control or label, at the index of the `position` attribute
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="ui" />
                    <xs:enumeration value="instrument" />
                    <xs:enumeration value="group" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>

        <xs:attribute name="position" type="xs:nonNegativeInteger">
            <xs:annotation><xs:documentation>
The specific 0-based index of the element to be modified by this binding.
If you are targeting a group, for example, the first group would be 0, the second group would be 1, etc.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="identifier" type="xs:string">
            <xs:annotation><xs:documentation>
A string identifying the specific parameter that you wish to change.
If you are modulating based on tags, you would put the tag you are targeting here.

&lt;a href=&quot;https://www.decentsamples.com/wp-content/uploads/2020/06/format-documentation.html#appendix-d-how-to-control-parameters-using-tags-example-mic-level-knobs&quot;&gt;
See DecentSampler documentation, Appendix D for an example.
&lt;/a&gt;
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="parameter" type="bindingParameterName" use="required" />

        <xs:attribute name="tags">
            <xs:annotation><xs:documentation>
A comma-separated list of tags to be modified by this binding.
This allows you to set values for multiple groups at once by targeting a tag that is assigned to the groups.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="translation" default="linear">
            <xs:simpleType><xs:restriction base="xs:string">
                <xs:enumeration value="linear" />
                <xs:enumeration value="table" />
                <xs:enumeration value="fixed_value" />
            </xs:restriction></xs:simpleType>
        </xs:attribute>

        <xs:attribute name="translationTable" type="translationTableType" default="0,0;1.1,1"/>
        <xs:attribute name="translationOutputMin" type="xs:decimal" />
        <xs:attribute name="translationOutputMax" type="xs:decimal" />

        <xs:attribute name="translationValue" type="xs:decimal">
            <xs:annotation><xs:documentation>
The parameter value to use when using `translation="fixed_value"`.
            </xs:documentation></xs:annotation>
        </xs:attribute>
    </xs:complexType>


    <xs:complexType name="label">
        <xs:annotation>
            <xs:documentation>
Specifies a positioned text label.
            </xs:documentation>
        </xs:annotation>

        <xs:attribute name="text" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>
The actual text that should be displayed as part of the label.
A label's text can also be set dynamically using bindings using the `TEXT` binding parameter name.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="vAlign" type="alignVertical">
            <xs:annotation>
                <xs:documentation>
The vertical alignment of the text within the box described by the width and height attributes.
Valid values: `top`, `bottom`, `center`.
Default: `center`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="hAlign" type="alignHorizontal">
            <xs:annotation>
                <xs:documentation>
The horizontal alignment of the text within the box described by the width and height attributes.
Valid values: `left`, `right`, `center`.
Default: `center`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attributeGroup ref="textProperties" />
        <xs:attributeGroup ref="widgetGeometry" />
    </xs:complexType>


    <xs:complexType name="groups">
        <xs:annotation>
            <xs:documentation>
Every dspreset file should have one and only one `groups` element.
This is where you specify the samples that make up your sample library.
This element lives right underneath the top-level `DecentSampler` element.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="group">
                <xs:annotation>
                    <xs:documentation>
Samples live in groups.
There can be many group elements under the `groups` element.
It can be useful to sort your samples into groups in order to apply similar settings to them or to control them with a knob.
The order of groups in a file matters insofar as bindings will often reference groups by using an index.
The first group in a file is group `0`, the second is group `1`, etc.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence minOccurs="0" maxOccurs="unbounded">
                        <xs:element name="sample" type="sample" maxOccurs="unbounded" />
                    </xs:sequence>

                    <xs:attribute name="ampVelTrack" type="xs:decimal">
                        <xs:annotation>
                            <xs:documentation>
The degree to which the velocity of the incoming notes affects the volume of the samples in this group.
`0` = not at all.
`1` = volume is completely determined by incoming velocity.

When the value is `1`, a velocity of `127` (max velocity) yields a gain `1.0` (full volume),
a velocity of `63` (half velocity) yields a gain of `0.5` (half volume), etc.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>

                    <xs:attribute name="groupTuning" type="xs:decimal">
                        <xs:annotation>
                            <xs:documentation>
Group-level pitch adjustment for changing note pitch.
In semitones.
For example, `1.0` would be a half-step up and `-1` would a half-step down.
Default: `0`
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attributeGroup ref="regionSettings" />
                </xs:complexType>
            </xs:element>
        </xs:sequence>

        <xs:attribute name="globalTuning" type="xs:decimal" default="0" />

        <xs:attributeGroup ref="regionSettings" />
    </xs:complexType>


    <xs:complexType name="tags">
        <xs:annotation>
            <xs:documentation>
The `tags` element lives right below your top-level `DecentSampler` element.
It allows you to specify details about the tags you use throughout your instrument.
It is however not actually necessary to include a `tags` element for every tag you use.
You only need to create this if you want to specify additional details about your tags.
            </xs:documentation>
        </xs:annotation>

        <xs:sequence maxOccurs="unbounded">
            <xs:element name="tag">
                <xs:annotation>
                    <xs:documentation>
Underneath the `tags` element, you can have any number of `tag` elements.
These specify details for each individual tag that you use throughout your sample mapping.
                    </xs:documentation>
                </xs:annotation>

                <xs:complexType>
                    <xs:attribute name="enabled" type="xs:boolean"/>

                    <xs:attribute name="volume">
                        <xs:annotation>
                            <xs:documentation>
A number for `0.0` to `1.0` that specifies the initial volume for a tag.
Default: `1.0`
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>

                    <xs:attribute name="polyphony" type="xs:nonNegativeInteger">
                        <xs:annotation>
                            <xs:documentation>
A whole number that specifies the number of voices allowed for this tag.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>


    <xs:complexType name="effects">
        <xs:annotation>
            <xs:documentation>
Within the `effects` element, you can have any number of `effect` sub-elements.
            </xs:documentation>
        </xs:annotation>

        <xs:sequence>
            <xs:element name="effect" type="effect" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="effect">
        <xs:annotation>
            <xs:documentation>

Specify parameters for each individual effect that you would like to have in your global effects chain.
There are currently only a handful effects available although more could definitely be added on request.

&lt;h2&gt; Effect types: &lt;/h2&gt;

&lt;h3&gt; `chorus` &lt;/h3&gt;
Attributes: `mix`, `modDepth`, `modRate`

&lt;h3&gt; `delay` &lt;/h3&gt;
Attributes: `delayTime`, `feedback`, `stereoOffset`, `wetLevel`

&lt;h3&gt; Filters: `lowpass`, `lowpass_4pl`, `bandpass`, `hipass` &lt;/h3&gt;
Attributes: `frequency`, `resonance`

&lt;h3&gt; `phaser` &lt;/h3&gt;
Attributes: `centerFrequency`, `feedback`, `mix`, `modDepth`, `modRate`

&lt;h3&gt; `reverb` &lt;/h3&gt;
Attributes: `damping`, `roomSize`, `wetLevel`

            </xs:documentation>
        </xs:annotation>

        <xs:attribute name="type" type="effectType" use="required" />

        <xs:attribute name="centerFrequency" type="xs:decimal" default="400">
            <xs:annotation><xs:documentation>
The center frequency (in Hz) of the phaser all-pass filters modulation.
Default: `400`
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="damping" type="decimalMultiplier" default="0.3"/>
        <xs:attribute name="delayTime" default="0.7">
            <xs:annotation><xs:documentation>
The delay time in seconds.
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:decimal">
                    <xs:minInclusive value="0" />
                    <xs:maxInclusive value="10" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="feedback" type="decimalMultiplier" default="0.2" />
        <xs:attribute name="frequency" type="decimalMultiplier" default="0.3">
            <xs:annotation><xs:documentation>
The filter frequency as a number between `0.0` - `1.0`.
Default: `0.3`

Very poorly documented!

"0.0 is not damped, 1.0 is fully damped"

"Fully damped" in the case of LP? Is the range 20 Hz - 20 kHz?
Is the frequency range linear, like the knobs seem to have?
            </xs:documentation></xs:annotation>
        </xs:attribute>
        <xs:attribute name="mix" type="decimalMultiplier" default="0.5">
            <xs:annotation><xs:documentation>
The wet/dry mix which controls how much of the effect signal we hear.
Default: `0.5`
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="modDepth" type="decimalMultiplier" default="0.2">
            <xs:annotation><xs:documentation>
The modulation depth of the effect.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="modRate">
            <xs:annotation><xs:documentation>
The modulation speed in Hz.
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:decimal">
                    <xs:minInclusive value="0.0" />
                    <xs:maxInclusive value="10.0" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>

        <xs:attribute name="resonance" type="decimalMultiplier" default="0.7" />
        <xs:attribute name="roomSize" type="decimalMultiplier" default="0.7" />

        <xs:attribute name="stereoOffset" default="0">
            <xs:annotation><xs:documentation>
The parameter allows you to introduce delay variations between the left and right channels.
Half of this amount is subtracted from the left channel's delay time and half of this amount is added to the right channel's delay time.
For example, if the delayTime is `0.5` seconds and the stereoOffset is `0.02` s, then the actual left channel delay time will be `0.49` s and the actual right channel delay time will be `0.51` s so that the two channels are offset by `0.02` seconds.
            </xs:documentation></xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:decimal">
                    <xs:minInclusive value="-10" />
                    <xs:maxInclusive value="10" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>

        <xs:attribute name="wetLevel" type="decimalMultiplier" default="0.5"/>

    </xs:complexType>

    <xs:simpleType name="effectType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="bandpass" />
            <xs:enumeration value="chorus" />
            <xs:enumeration value="delay" />
            <xs:enumeration value="hipass" />
            <xs:enumeration value="lowpass" />
            <xs:enumeration value="lowpass_4pl" />
            <xs:enumeration value="reverb" />
            <xs:enumeration value="phaser" />
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="midi">
        <xs:annotation><xs:documentation>
MIDI mappings.
        </xs:documentation></xs:annotation>
        <xs:choice maxOccurs="unbounded">
            <xs:element name="cc" type="midiCCElement" />
            <xs:element name="note" type="midiNoteElement" />
        </xs:choice>
    </xs:complexType>


    <xs:complexType name="midiCCElement">
        <xs:annotation><xs:documentation>
Within the `midi` element, you can have any number of `cc` elements.
These allow you to map changes in incoming continuous controller messages to specific parameters of your instrument.
To use this functionality, you'll want to add a separate `cc` element for each CC number you would like to respond to.
The `cc` element has a single required attribute `number` which specifies the number (from 0 to 127) of the continuous controller you would like to listen on.
Beneath the `cc` element, you can have any number of bindings. 
        </xs:documentation></xs:annotation>

        <xs:sequence>
            <xs:element name="binding" maxOccurs="unbounded">
            </xs:element>
        </xs:sequence>

        <xs:attribute name="number" type="midi7Bit" use="required" />
    </xs:complexType>


    <xs:complexType name="midiNoteElement">
        <xs:annotation><xs:documentation>
Within the `midi` element, you can have any number of `note` elements.
These allow you to map specific notes to specific parameters of your instrument.
To use this functionality, you'll want to add a separate `note` element for each MIDI note you would like to respond to.
The `note` element has a single required attribute `note=""` which specifies the number (from 0 to 127) of the MIDI note you would like to listen on.
Beneath the `note` element, you can have any number of bindings.
        </xs:documentation></xs:annotation>
        <xs:attribute name="note" type="midi7Bit" use="required" />
    </xs:complexType>


    <xs:complexType name="sample">
        <xs:attribute name="path" type="relativeFilePath" use="required">
            <xs:annotation>
                <xs:documentation>
The relative path of the sample file to play for this zone.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="loNote" type="midi7Bit" default="0">
            <xs:annotation>
                <xs:documentation>
The MIDI note number of the lowest note for which the zone should be triggered.
Default: `0`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="hiNote" type="midi7Bit" default="127">
            <xs:annotation>
                <xs:documentation>
The MIDI note number of the highest note for which the zone should be triggered.
Default: `127`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="rootNote" type="midi7Bit" use="required">
            <xs:annotation>
                <xs:documentation>
The MIDI note number of the root note of the sample.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="start" type="xs:nonNegativeInteger" default="0">
            <xs:annotation>
                <xs:documentation>
The frame/sample position of the start of the sample audio.
This is useful if the sample starts midway through the audio file.
Default: `0`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="end" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>
The frame/sample position of the end of the sample audio.
This is useful if the sample starts midway through the audio file.
Default: the file's length in samples minus 1.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="tuning" type="xs:decimal">
            <xs:annotation>
                <xs:documentation>
A fine-tuning number (in semitones) for changing the note pitch.
Example: `1.0` would be a half-step up.
Default: `0`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attributeGroup ref="regionSettings" />
    </xs:complexType>


    <xs:simpleType name="midi7Bit">
        <xs:restriction base="xs:integer">
            <xs:minInclusive value="0" />
            <xs:maxInclusive value="127" />
        </xs:restriction>
    </xs:simpleType>


    <xs:simpleType name="curveShape">
        <xs:annotation>
            <xs:documentation>
A value from -100 to 100 that determines the shape of a curve.
`-100` is a logarithmic curve, `0` is a linear curve, and `100` is an exponential curve.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:decimal">
            <xs:minInclusive value="-100" />
            <xs:maxInclusive value="100" />
        </xs:restriction>
    </xs:simpleType>


    <xs:simpleType name="hexARGB">
        <xs:annotation>
            <xs:documentation>
Colors are represented throughout the dspreset files using an 8-digit ARGB color format.
These are identical to web color hex codes except with an additional 2-digit hex number in front of them.
The first two digits are a hexadecimal representation of alpha level with 00 being fully transparent, 80 being 50% transparent, and FF being fully opaque.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:hexBinary">
            <xs:length value="4" fixed="true" />
        </xs:restriction>
    </xs:simpleType>


    <xs:simpleType name="decimalMultiplier">
        <xs:restriction base="xs:decimal">
            <xs:minInclusive value="0.0" />
            <xs:maxInclusive value="1.0" />
        </xs:restriction>
    </xs:simpleType>



    <xs:simpleType name="decimalPositive">
        <xs:restriction base="xs:decimal">
            <xs:minInclusive value="0.0" />
        </xs:restriction>
    </xs:simpleType>


    <xs:simpleType name="relativeFilePath">
        <xs:annotation>
            <xs:documentation>
Relative path to a file.
Do not use absolute paths - they break across OS platforms and users.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="[a-zA-Z0-9_][a-zA-Z0-9 #\-_./\\]*"></xs:pattern>
        </xs:restriction>
    </xs:simpleType>


    <xs:simpleType name="decibelGain">
        <xs:restriction base="xs:string">
            <xs:pattern value="-?\d+(\.\d*)?dB"></xs:pattern>
        </xs:restriction>
    </xs:simpleType>


    <xs:simpleType name="decibelOrAbsoluteGain">
        <xs:annotation>
            <xs:documentation>
A gain value can be either an absolute factor `0.0-1.0`,
or a decibel value ending in `dB`.
Example: `3dB`
            </xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="decibelGain xs:decimal" />
    </xs:simpleType>


    <xs:simpleType name="panPercentage">
        <xs:annotation>
            <xs:documentation>
Stereo panning as a number from `-100` to `100`.
`-100` is panned all the way to the left, 100 is panned all the way to the right.
Default: `0`
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:decimal">
            <xs:minInclusive value="-100.0" />
            <xs:maxInclusive value="100.0" />
        </xs:restriction>
    </xs:simpleType>


    <xs:simpleType name="alignVertical">
        <xs:restriction base="xs:string">
            <xs:enumeration value="top" />
            <xs:enumeration value="center" />
            <xs:enumeration value="bottom" />
        </xs:restriction>
    </xs:simpleType>


    <xs:simpleType name="alignHorizontal">
        <xs:restriction base="xs:string">
            <xs:enumeration value="left" />
            <xs:enumeration value="center" />
            <xs:enumeration value="right" />
        </xs:restriction>
    </xs:simpleType>


    <xs:simpleType name="controlStyle">
        <xs:restriction base="xs:string">
            <xs:enumeration value="linear_bar" />
            <xs:enumeration value="linear_bar_vertical" />
            <xs:enumeration value="linear_horizontal" />
            <xs:enumeration value="linear_vertical" />
            <xs:enumeration value="rotary" />
            <xs:enumeration value="rotary_horizontal_drag" />
            <xs:enumeration value="rotary_horizontal_vertical_drag" />
            <xs:enumeration value="rotary_vertical_drag" />
        </xs:restriction>
    </xs:simpleType>


    <xs:simpleType name="translationTableType">
        <xs:restriction base="xs:string">
            <xs:pattern value="(-?[0-9.]+,-?[0-9.]+)(;-?[0-9.]+,-?[0-9.]+)*" />
        </xs:restriction>
    </xs:simpleType>


    <xs:simpleType name="bindingParameterName">
        <xs:restriction base="xs:string">

            <!-- instrument, amp -->
            <xs:enumeration value="AMP_VOLUME" />
            <xs:enumeration value="GLOBAL_TUNING" />
            <xs:enumeration value="PAN" />
            <xs:enumeration value="AMP_VEL_TRACK" />
            <xs:enumeration value="ENV_ATTACK" />
            <xs:enumeration value="ENV_DECAY" />
            <xs:enumeration value="ENV_SUSTAIN" />
            <xs:enumeration value="ENV_RELEASE" />
            <xs:enumeration value="GLIDE_TIME" />

            <!-- instrument, effect -->
            <xs:enumeration value="FX_FILTER_FREQUENCY" />
            <xs:enumeration value="FX_FILTER_RESONANCE" />
            <xs:enumeration value="FX_REVERB_WET_LEVEL" />
            <xs:enumeration value="FX_REVERB_ROOM_SIZE" />
            <xs:enumeration value="FX_REVERB_DAMPING" />
            <xs:enumeration value="FX_MIX" />
            <xs:enumeration value="FX_MOD_DEPTH" />
            <xs:enumeration value="FX_MOD_RATE" />
            <xs:enumeration value="FX_CENTER_FREQUENCY" />
            <xs:enumeration value="FX_FEEDBACK" />
            <xs:enumeration value="FX_DELAY_TIME" />
            <xs:enumeration value="FX_STEREO_OFFSET" />
            <xs:enumeration value="FX_WET_LEVEL" />

            <!-- group, amp -->
            <xs:enumeration value="ENABLED" />
            <xs:enumeration value="AMP_VOLUME" />
            <xs:enumeration value="GROUP_TUNING" />

            <!-- tag, amp -->
            <xs:enumeration value="TAG_ENABLED" />
            <xs:enumeration value="TAG_VOLUME" />

            <!-- ui, control -->
            <xs:enumeration value="VALUE" />
            <xs:enumeration value="TEXT" />

        </xs:restriction>
    </xs:simpleType>
<!--
================================================================
    Attribute group definitions
================================================================
-->

<!-- Common attributes for <sample>, <group> and <groups> -->
    <xs:attributeGroup name="regionSettings">
        <xs:attribute name="volume" type="decibelOrAbsoluteGain" />
        <xs:attribute name="pan" type="panPercentage" />

        <xs:attribute name="glideTime" type="decimalPositive">
            <xs:annotation><xs:documentation>
The glide/portamento time in seconds.
A value of `0.0` would mean no portamento.
You will most likely want to set this globally at the `groups` level.
Default: `0.0`
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="glideMode" default="legato">
            <xs:annotation><xs:documentation>
Controls the glide/portamento behavior.
Possible values are:

`always` (glide is always performed),
`legato` (glide is performed only when transitioning from one note to another), and
`off`.

Default: `legato`
        </xs:documentation></xs:annotation>
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:enumeration value="always" />
                <xs:enumeration value="legato" />
                <xs:enumeration value="off" />
            </xs:restriction>
        </xs:simpleType>
        </xs:attribute>

        <xs:attribute name="loVel" type="midi7Bit">
            <xs:annotation>
                <xs:documentation>
The lowest velocity for which this zone should be triggered.
Default: `0`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="hiVel" type="midi7Bit">
            <xs:annotation>
                <xs:documentation>
The highest velocity for which this zone should be triggered.
Default: `127`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="pitchKeyTrack" type="decimalMultiplier">
            <xs:annotation>
                <xs:documentation>
 A number from `0.0` to `1.0`.
 `0` means that the pitch will stay the same regardless of what note is played.
 `1` means that the pitch will increase by one semitone when the note increases by one semitone (i.e. normal key pitch tracking).
 Default: `1`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attributeGroup ref="adsrEnvelope" />

        <!--
            Tolerate any other attributes for now, in order to support
            `loCC` and `hiCC` -prefixed attributes.
        -->
        <xs:anyAttribute namespace="##local" processContents="skip"/>
    </xs:attributeGroup>

    <xs:attributeGroup name="adsrEnvelope">
        <xs:attribute name="attack" type="xs:decimal">
            <xs:annotation>
                <xs:documentation>
The attack time in seconds of the amplitude envelope of this zone.
            </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="decay" type="xs:decimal">
            <xs:annotation>
                <xs:documentation>
The decay time in seconds of the amplitude envelope of this zone.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="sustain" type="decimalMultiplier">
            <xs:annotation>
                <xs:documentation>
The sustain level (`0.0` - `1.0`) of the amplitude envelope of this zone.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="release" type="xs:decimal">
            <xs:annotation>
                <xs:documentation>
The release time in seconds of the amplitude envelope of this zone.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="attackCurve" type="curveShape" default="-100" />
        <xs:attribute name="decayCurve" type="curveShape" default="100" />
        <xs:attribute name="releaseCurve" type="curveShape" default="100" />
    </xs:attributeGroup>

<!-- Common attributes for UI widgets -->
    <xs:attributeGroup name="widgetGeometry">
        <xs:attribute name="x" type="xs:integer" use="required">
            <xs:annotation>
                <xs:documentation>
The x position, in pixels, where (0,0) is the top-left corner.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="y" type="xs:integer" use="required">
            <xs:annotation>
                <xs:documentation>
The y position, in pixels, where (0,0) is the top-left corner.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <!--
            The documentation specifies width and height as "required", but some presets
            by Hilowitz leave one/both of these undefined for labeled-knobs and controls.
        -->
        <xs:attribute name="width" type="xs:integer">
            <xs:annotation>
                <xs:documentation>
The width of the whole widget, in pixels
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="height" type="xs:integer">
            <xs:annotation>
                <xs:documentation>
The height of the whole widget, in pixels
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>


<!-- Common attributes for UI text -->
    <xs:attributeGroup name="textProperties">
        <xs:attribute name="textColor" type="hexARGB" />
        <xs:attribute name="textSize" type="xs:integer" default="12">
            <xs:annotation>
                <xs:documentation>
A font size for the text label.
Default: `12`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>

<!-- Common attributes for UI controls -->
    <xs:attributeGroup name="controlProperties">
        <xs:attribute name="minValue" type="xs:decimal" default="0">
            <xs:annotation>
                <xs:documentation>
The minimum value of your control.
Default: `0`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="maxValue" type="xs:decimal" default="1">
            <xs:annotation>
                <xs:documentation>
The maximum value of your control.
Default: `1`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="value" type="xs:decimal" default="0">
            <xs:annotation>
                <xs:documentation>
The initial value of your control.
Default: `0`
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="label" type="xs:string">
            <xs:annotation>
                <xs:documentation>
If `showLabel` is `true`, the actual text that should be displayed above the control
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="showLabel" type="xs:boolean" default="true">
            <xs:annotation>
                <xs:documentation>
A true/false value dictating whether or not a built-in label should be displayed.
Default: `true` for `labeled-knob` and `false` for `control` elements.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="parameterName" type="xs:string">
            <xs:annotation>
                <xs:documentation>
In a situation where the sampler does not have enough room to display the full UI, a shrunken down version of the UI will be used.
In such situations, this control will be labeled using the `parameterName`.
It is good practice to always include a `parameterName`.
If no `parameterName` is specified and `label` is specified, then that will be used instead.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>


        <xs:attribute name="style" type="controlStyle" default="rotary_vertical_drag" />

        <xs:attribute name="type" type="xs:string" />

        <xs:attribute name="trackForegroundColor" type="hexARGB" />
        <xs:attribute name="trackBackgroundColor" type="hexARGB" />

        <xs:attribute name="uid">
            <xs:annotation>
                <xs:documentation>
This is an internally generated value.
This can be ignored.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>

</xs:schema>